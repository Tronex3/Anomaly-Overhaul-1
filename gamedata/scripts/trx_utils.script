
-- =======================================================================================
-- Created by Tronex
-- Last modification: 2018/7/29
-- A bunch of useful utility functions to be called and used by other scripts
-- =======================================================================================

local ini = system_ini()

local clr_table = {
	["white"]  = {255, 250, 250, 250},
	["gray"]   = {255, 170, 170, 170},
	["dark"]   = {0,140,140,140},
	["blue"]   = {0,153,255,255},
	["orange"] = {255,238,153,26},
	["red"]    = {0,204,0,51},
	["purple"] = {0,93,0,116},
	["green"]  = {0,51,255,102},
	["yellow"] = {0,250,250,0},
	
	-- Colors used in encyclopedia
	["e_green"] = {0,56,209,115},
	["e_blue"] = {0,56,166,209},
	["e_orange"] = {0,209,209,56},
	["e_gray"] = {0,170,170,170},
	["e_white"] = {0,250,250,250},
	
	-- Strong
	["s_green"]  = {0,0,250,0},
	["s_yellow"] = {0,250,250,0},
	["s_orange"] = {0,250,150,0},
	["s_red"]    = {0,250,0,0}
}

function get_clr (str , code)

-- Rule: obtain specific color code as a string or table
-- Input: color name (string) , result as string or table (boolean)
-- Output: if code is true, return table | if code is false, return string 
-- Example: get_clr("blue") --> "%c[0,153,255,255]"

	local color, color_s
	if str then
		color = clr_table[str]
	else
		color = {255, 170, 170, 170}
	end
	color_s = strformat("%c[%s,%s,%s,%s]",color[1],color[2],color[3],color[4])
	
	if code then
		return color
	end
	return color_s
end

function play_sound (path, vol)
	if (not path) or (type(path) ~= "string") then return end
	
	local snd = sound_object(path)
	if snd then
		snd:play(db.actor, 0, sound_object.s2d)
		--snd:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), vol or 1)
		snd.volume = vol or 1
	end
end

function set_msg (str, ignore)
	if (not ignore) then
		local hud = ActorMenu.get_actor_menu()
		if (hud and hud:IsShown()) then 
			hud:HideDialog()
		end
	end

	local text = game.translate_string(str)
	SetHudMsg(text,3)
end

function collect_ini_sections (path) 

-- Rule: function for parsing all sections in a file (modified part of alex1197 script)
-- Input: path to ini file (path start inside "configs")
-- Output: table of all sections from the ini file

	local f = io.open(tostring("gamedata\\configs\\") .. path , "r")
	local tab = {}
	local line = ""
	local newLine
	local i
	local currentTag = nil
	while line ~= nil do	
		line = line:gsub("\\;", "#_!36!_#") -- to keep \;
		line = line:gsub("\\=", "#_!71!_#") -- to keep \=
		if line ~= "" then

			newLine = line
			line = ""
			for i=1, string.len(newLine) do				
				if string.sub(newLine, i, i) ~= ";" then
					line = line..newLine:sub(i, i)						
				else				
					break
				end
			end
			line = line:gsub("^%s*(.-)%s*$", "%1")
			-- Find tag			
			if line:sub(1, 1) == "[" then
				currentTag = line:gsub('%[(.*)%]%:.*','%1')
				tab[#tab+1] = currentTag
			end	

		end
		line = f:read("*line")		
	end
	f:close()
	return tab
end

function time_spent_in_zone(ind)

-- Rule: calculate and return how much time the player has spent in the zone based on a time scale
-- Input: indicator (number from 1 to 5)
-- Output: the time spent (number) so far, time scale depends on input

	if (not ind) and (not db.actor) then
		return false
	end
	
	local s_time = level.get_start_time()
	local seconds = tonumber(game.get_game_time():diffSec(s_time))
	local minutes = math.floor(seconds/60)
	local hours = math.floor(minutes/60)
	local days = math.floor(hours/24)
	local weeks = math.floor(days/7)
	
	if (ind == 1) then
		return seconds
	elseif (ind == 2) then
		return minutes
	elseif (ind == 3) then
		return hours
	elseif (ind == 4) then
		return days
	elseif (ind == 5) then
		return weeks
	end
	return false
end

function is_time_spent_in_zone(s,m,h,d,w,mo)

-- Rule: return true of the time spent in the zone exceeds the input (sec,min,hrs,days,weeks,months)
-- Input: time scales (sec,min,hrs,days,weeks,months)
	
	s = s or 0
	m = m or 0
	h = h or 0
	d = d or 0
	w = w or 0
	mo = mo or 0
	
	local s_time = level.get_start_time()
	local seconds = tonumber(game.get_game_time():diffSec(s_time))
	local minutes = math.floor(seconds/60)
	local hours = math.floor(minutes/60)
	local days = math.floor(hours/24)
	local weeks = math.floor(days/7)
	local months = math.floor(weeks/4)
	
	--printf(">>> TRX - is_time_spent_in_zone(" .. s .. ":" .. m .. ":" .. h .. "," .. d .. "," .. w .. "," .. mo .. ") | Current time: (" .. seconds .. ":" .. minutes .. ":" .. hours .. "," .. days .. "," .. weeks .. "," .. months .. ")")
	
	if (months > mo) then
		return true
	elseif (months == mo) and (weeks > w) then
		return true
	elseif (months == mo) and (weeks == w) and (days > d) then
		return true
	elseif (months == mo) and (weeks == w) and (days == d) and (hours > h) then
		return true
	elseif (months == mo) and (weeks == w) and (days == d) and (hours == h) and (minutes > m) then
		return true
	elseif (months == mo) and (weeks == w) and (days == d) and (hours == h) and (minutes == m) and (seconds > s) then
		return true
	end
	
	return false
end

function hide_menu()
	local hud = get_hud()
	if (hud) then
		hud:HideActorMenu()
	end
end

function adjust_ui(ui)
	local rw = 1024/(device().width)
	local rh = 768/(device().height)
	local pos = ui:GetWndPos()
	local w = ui:GetWidth()
	local h = ui:GetHeight()
	--printf("TRX adjust_ui | width ratio: " .. rw .. " - height ratio: " .. rh .. " - pos: " .. pos.x .. " " .. pos.y .. " - w: " .. w .. " - h: " .. h)
	
	ui:SetWndSize(vector2():set( w*rw , h*rh ))
	ui:SetWndPos(vector2():set( pos.x*rw , pos.y*rh ))
end

function adjust_main_ui(ui, only_pos)
	local rw = 1024/(device().width)
	local rh = 768/(device().height)
	local pos = ui:GetWndPos()
	local w = ui:GetWidth()
	local h = ui:GetHeight()
	--printf("TRX adjust_main_ui | width ratio: " .. rw .. " - height ratio: " .. rh .. " - pos: " .. pos.x .. " " .. pos.y .. " - w: " .. w .. " - h: " .. h)
	
	local _x = ((device().width - w)/2)
	local _y = ((device().height - h)/2)
	
	ui:SetWndPos(vector2():set(_x*rw , _y*rh))
	if only_pos then return end
	ui:SetWndSize(vector2():set( w*rw , h*rh ))
end

function get_ui_settings(ico_size,_le)
	local IsWide = (device().width / device().height > (1024/768+0.01)) and true or false
	local IsBig = 1024/(device().width) < 0.99 and true or false
	
	local _le = _le or 50
	local rw = IsBig and 1024/(device().width) or 1
	local rh = IsBig and 768/(device().height) or 1
	local ico_size = ico_size or 1
	local ico_width = IsWide and rw or 1
	
	return ico_size, ico_width, rw, rh, _le
end

--============================================< Items >============================================--

function get_item_axis (sec)

-- Rule: get item axis out of info from its section
-- Input: section of the target item (string)
-- Output: table of item's axis (x1, y1, x2, y2, width, height)

	local a = {}
		
	local inv_grid_x = ini:r_float_ex (sec,"inv_grid_x") or 0
	local inv_grid_y = ini:r_float_ex (sec,"inv_grid_y") or 0
	local inv_grid_width = ini:r_float_ex (sec,"inv_grid_width") or 0
	local inv_grid_height = ini:r_float_ex (sec,"inv_grid_height") or 0
	
	local x1 = inv_grid_x*50
	local y1 = inv_grid_y*50

	local w = inv_grid_width*50
	local h = inv_grid_height*50

	local x2 = x1 + w
	local y2 = y1 + h
	
	a.x1 = x1
	a.y1 = y1
	a.x2 = x2
	a.y2 = y2
	a.w = w
	a.h = h
	
	return a
end

function create_inv_obj (sec,delay)
	delay = delay or 0.05
	local name = sec .. "_" .. tostring(math.random(1000))
	
	local function timer_create()
		alife():create(sec, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
		RemoveTimeEvent("create_obj",name)
		--printf("TRX create_inv_obj | alife object: " .. sec .. " has been created!")
		--return true
	end
	
	if sec and ini:section_exist(sec) then
		CreateTimeEvent("create_obj",name,delay,timer_create)
	end
end

function release_obj (obj,delay)
	delay = delay or 0.05
	db.actor:drop_item(obj)
	local se_obj = alife_object(obj:id())
	local sec = obj:section()
	local id = obj:id()
	local name = sec .. "_" .. tostring(math.random(1000))
	
	local function timer_release()
		alife():release(se_obj,true)
		RemoveTimeEvent("release_obj",name)
		--printf("TRX release_obj | alife object: " .. sec .. "(" .. id .. ") has been released!")
		--return true
	end
	
	if se_obj then
		CreateTimeEvent("release_obj",name,delay,timer_release)
	end
end

function release_inv_obj (sec)
	local obj = db.actor:object(sec)
	db.actor:drop_item(obj)
	local se_obj = alife_object(obj:id())
	if se_obj then
		alife():release(se_obj)
	end
end

function replace_inv_obj (old_obj , new_sec)
	if old_obj and new_sec then
		release_obj(old_obj)
		create_obj(new_sec)
	end
end

function check_inv_obj (sec)
	local obj = db.actor:object(sec)
	return (obj and true)
end

function collect_inv_obj (sec , num , ... )

-- Rule: search and collect available objects of a specific item from player's inventory
-- Input: section of the target item , number of objects to obtain , id of items that should be excluded from the search
-- Output: a table of the obtained objects of our item

	local item_all = {}
	local item_parts = {}
	local p = {...}
	local allow = true
	
	if (not num) then 
		return false
	end
	
	local function search(temp, item)
		if p and (#p > 0) then
			for i=1,#p do
				if (item:id() == p[i]) then
					allow = false
				end
			end
		end
		if (item:section() == sec) and allow then
			item_all[#item_all+1] = item
			--printf("TRX - collect_inv_obj | found viable item: " .. item:section() .. " | id: " .. item:id())
		end
		allow = true
	end
	db.actor:iterate_inventory(search,nil)
	
	if (#item_all == 0) then
		--printf("TRX - collect_inv_obj | no viable item found")
		return false
	end
	
	if (num > 0) and (#item_all >= num) then
		for i=1,num do
			item_parts[#item_parts+1] = item_all[num]
		end
		return item_parts
	else
		return item_all
	end
end

function collect_inv()
	local inv = {}
	local function iterate(temp, obj)
		inv[obj:id()] = obj:section()
	end
	
	db.actor:iterate_inventory(iterate,nil)
	return inv
end

function adjust_item_charge (obj , num) 

-- Rule: adjust an existing multi-use item (increase or reduce the number of uses)
-- Input: multi-use item (object) , uses adjusting (number)
-- Output: remove the input item and create new one with adjusted uses, return true if the process went good
-- Example: ( swiss_knife_6 , -1 ) --> swiss_knife_5

	local uses = system_ini():r_float_ex(obj:section(),"uses_index")
	local base = system_ini():r_string_ex(obj:section(),"uses_base")
	
	if (not uses) or (not base) or (not system_ini():section_exist(base)) then
		return false
	end
	
	if (uses + num < 1) then return end
	
	local sec = get_item_charge (base, uses, num)
	if (not sec) or (not system_ini():section_exist(sec)) then
		return false
	end

	release_obj(obj)
	create_inv_obj(sec)
	--printf("TRX - adjust_charge_item | Delete old item use: " .. obj:section() .. " | Get new item use: " .. sec)
	
	return true
end

function get_item_charge (base , uses_1 , uses_2)

-- Rule: get a multi-use item section based on a combination of uses of its base form
-- Input: section of base multi-use item (string) , number of uses 1 , number of uses 2
-- Output: section of the new multi-use item by combining uses 1 and 2
-- Example: ( swiss_knife , 2 , 3 ) --> swiss_knife_5 [combine] | ( swiss_knife , 4 , -1 ) --> swiss_knife_3 [separate]

	if (not base) or (not uses_1) or (not uses_2) then
		return nil
	end
	
	-- Items with charges
	local charges = ini:r_float_ex(base,"uses_charges") or false
	local cls_dbg = ini:r_string_ex(base,"class_dbg") or ""
	if charges then
		local str = string.sub(base,1,-2) -- remove last character
		local tbl = {str}
		for i=1,charges do
			if (ini:section_exist(str .. tostring(i))) then
				tbl[#tbl+1] = str .. tostring(i)
			end
		end
		for i=1,#tbl do
			local uses_new = ini:r_float_ex(tbl[i],"uses_index")
			if (ini:r_string_ex(tbl[i],"uses_base") == base) and (uses_new == utils.round(uses_1 + uses_2, 2)) then 
				return tbl[i]
			end
		end
	
	-- Items with special section name
	elseif (cls_dbg ~= "S_REPAIR") and (string.sub(base, string.len(base)-1, string.len(base)-1) == "_") then
		local str = string.sub(base,1,-3) -- remove last 2 characters
		local tbl = {str,base}
		local n = 2
		while ini:section_exist(str .. "_" .. tostring(n)) do
			tbl[#tbl+1] = str .. "_" .. tostring(n)
			n = n + 1
		end
		for i=1,#tbl do
			local uses_new = ini:r_float_ex(tbl[i],"uses_index")
			if (ini:r_string_ex(tbl[i],"uses_base") == base) and (uses_new == utils.round(uses_1 + uses_2, 2)) then 
				return tbl[i]
			end
		end
	
	-- Everything else
	else
		uses_new = utils.round(uses_1 + uses_2, 2)
		local sec = base .. "_" .. tostring(uses_new)
		if (uses_1 == 2) and (uses_2 == -1) then
			sec = base
		end
		return sec
	end
	
	return nil
end
