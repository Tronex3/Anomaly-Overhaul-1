-- ============================================================
--
-- coc_treasure_manager.script
--	CoC 1.4.19 - DoctorX Questlines 1.19
--
--	Modified by: DoctorX
--	Last revised: December 11, 2016
--
-- ============================================================


--[[
------------------------------------------------------------------------------------------------------------------
-- Treasure randomizer
-- by Alundaio
------------------------------------------------------------------------------------------------------------------
This script spawns loot, randomly, inside all INVBOX class objects. Loot is determined on new game start and stored
within the .scoc as a string. When the cache is opened, the loot is spawned.

A list of all valid item sections is generated automatically by parsing all of system_ini(). From this list, loot can be obtained. If you do not
want a certain section from being spawned, put it in 'plugins\coc_treasure_manager.ltx' 'ignore_sections'.

A valid item section is determined by several factors:
1. It must have can_trade = true
2. It must have quest_item = false
3. It must not have '_mp' in it's section name
4. It must have a valid 'inv_name' value
5. 'cost' must be greater than 0

To debug or to obtain a list of valid item sections, simply enable DEV_DEBUG (-iamcheater in command line).
You shall find a 'valid_item_sections.ltx' in your main game directory after you start a new game.

To debug the actual results, start a new game. Then while in the loadscreen menu ctrl+left-click on the new 'autosave'. You
will find the <filename>.lua in your savegame folder. Search the file for 'caches'
--]]



-- =======================================================================================
-- Modified by Tronex
-- 2018/9/4 

-- The manager no longer relies on blacklists. A whitelist is used instead to spawn specified items
-- This has been done thanks to the massive amount of sections and the headache coming from it
-- A new feature is the ability to blacklist specific items from being included in stashes in specific progression difficulties
-- Check coc_treasure_manager.ltx for more info
-- =======================================================================================



caches = {}
local caches_count = 0

local ltx = ini_file("plugins\\item_management\\coc_treasure_manager.ltx")
local valid_item_list = nil
------------------------------------------------------------------------------------------------------------------
--							PRIVATE
------------------------------------------------------------------------------------------------------------------
local function on_game_load()
	if (caches_count > 0) then
		return
	end

	local sim = alife()
	for i=1, 65534 do
		local se_obj = sim:object(i)
		if (se_obj) then
			if (IsInvbox(nil,se_obj:clsid())) then
				caches[se_obj.id] = false
				caches_count = caches_count + 1
			--elseif (se_obj:spawn_ini() and se_obj:spawn_ini():section_exist("drop_box")) then
			--	box_caches[se_obj.id] = false
			--	box_caches_count = caches_count + 1
			end
		end
	end

	for i=1, math.floor(caches_count/2) do
		create_random_stash(true,"stash")
	end

	-- remove all unused stashes from the list
	--[[
	for k,v in pairs(caches) do
		if (v == false) then
			caches[k] = nil
		end
	end
	--]]
end

local function actor_on_item_take_from_box(box,itm)
	if (caches[box:id()] == true) then
		caches[box:id()] = false
		local hud = get_hud()
		if (hud and box:is_inv_box_empty()) then
			hud:HideActorMenu()
		end
		level.map_remove_object_spot(box:id(), "treasure")
		xr_statistic.inc_counter("stashes_found")
		news_manager.send_treasure(1)
	end
end

local function save_state(data)
	--alun_utils.debug_write("coc_treasure_manager.save_state")
	if (caches_count <= 0) then
		return
	end

	if not (data.coc_treasure_manager) then
		data.coc_treasure_manager = {}
	end

	data.coc_treasure_manager.caches_count = caches_count
	data.coc_treasure_manager.caches = caches
end

local function load_state(data)
	if not (data.coc_treasure_manager) then
		return
	end

	caches_count = data.coc_treasure_manager.caches_count or caches_count
	caches = data.coc_treasure_manager.caches or caches

	data.coc_treasure_manager.caches_count = nil
	data.coc_treasure_manager.caches = nil
end

local function physic_object_on_use_callback(box,who)
	if (IsInvbox(box)) then
		try_spawn_treasure(box)
	end
end
------------------------------------------------------------------------------------------------------------------
--							ON GAME START
------------------------------------------------------------------------------------------------------------------
function on_game_start()
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("actor_on_item_take_from_box",actor_on_item_take_from_box)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("physic_object_on_use_callback",physic_object_on_use_callback)
end

-------------------------------------------------------------------------------------------------------------------

--local reward stashes mod
function box_in_same_map(id)
	local obj1 = alife():actor()
	local obj2 = alife_object(id)
	return simulation_objects.is_on_the_same_level(obj1, obj2) or simulation_objects.is_on_the_linked_level(obj1, obj2)
end

last_secret = nil
function create_random_stash(no_spot, hint, bonus_items, spawn_local)
	--printf("[lrs]create_random_stash(%s,%s,%s,%s)",no_spot,hint,bonus_items,spawn_local)
	last_secret = nil

	if (caches_count <= 0) then
		return
	end

	last_secret = true

	local sim = alife()

	-- create a temporary table to use math.random
	local t = {}
	local size_t = 0
	for id,v in pairs(caches) do
		-- false means box is available
		--local reward stashes mod
		if (v == false) then
			if(spawn_local) then
				if(box_in_same_map(id)) then
					size_t = size_t + 1
					t[size_t] = id
				end
			else
				size_t = size_t + 1
				t[size_t] = id
			end
		end
	end

	local index = size_t > 0 and math.random(size_t)
	if not (index) then
		return
	end

	local id = t[index]
	local se_box = id and sim:object(id)
	if not (se_box) then
		caches[id] = nil
		caches_count = caches_count - 1
		return
	end

	if not (valid_item_list) then
		valid_item_list = get_valid_item_sections()
	end

	local spawned_item = bonus_items or {}
	local max_weight = math.random(80,130)

	if (has_alife_info("achieved_rag_and_bone")) then
		max_weight = max_weight + 30
	end

	local ini = system_ini()
	local function is_consumable(section)
		local v = ini:r_string_ex(section,"class","")
		return v == "S_FOOD" or v == "II_FOOD"
	end

	local function is_outfit(section)
		local v = ini:r_string_ex(section,"class","")
		return v == "EQU_STLK" or v == "E_STLK" or v == "EQU_HLMET" or v == "E_HLMET"
	end

	local function is_weapon(section)
		local v = ini:r_string_ex(section,"class","")
		return string.find(v,"WP_") ~= nil
	end

	local function try_spawn_item(sec,min,max,chance,weight)
		if (max_weight >= weight) then
			local new_max = math.random(min,max)
			for i=1,new_max do
				if ((math.random(1,100)/100) <= chance) then
					spawned_item[#spawned_item+1] = sec
					max_weight = max_weight - weight
				end
			end
		end
	end

	local allow_item = true
	-- iterate most expensive to least expensive or visa versa. Highest cost has highest weight. Consumables have higher max. Outfits have high weights.
	local functor = random_choice(function(t,a,b) return t[a] > t[b] end,function(t,a,b) return t[a] < t[b] end)
	for section,cost in spairs(valid_item_list,functor) do

		-- prevent a stash from having more than a single outfit or weapon
		local skip = false
		local bWeapon = is_weapon(section)
		local bOutfit = not bWeapon and is_outfit(section)
		if (bWeapon or bOutfit) then
			if (allow_item) then
				allow_item = false
			else
				skip = true
			end
		end

		if not (skip) then
			-- decide for each section based on chance, weight and item classification
			if (cost <= 500) then
				if (is_consumable(section)) then
					try_spawn_item(section,1,4,0.25,10)
				elseif (bOutfit) then
					try_spawn_item(section,1,1,0.25,40)
				elseif (bWeapon) then
					try_spawn_item(section,1,1,0.25,40)
				else
					try_spawn_item(section,1,1,0.25,40)
				end
			elseif (cost <= 1000) then
				if (is_consumable(section)) then
					try_spawn_item(section,1,4,0.15,15)
				elseif (bOutfit) then
					try_spawn_item(section,1,1,0.15,50)
				elseif (bWeapon) then
					try_spawn_item(section,1,1,0.15,50)
				else
					try_spawn_item(section,1,1,0.15,50)
				end
			elseif (cost <= 3000) then
				if (bOutfit) then
					try_spawn_item(section,1,1,0.10,55)
				elseif (bWeapon) then
					try_spawn_item(section,1,1,0.10,45)
				else
					try_spawn_item(section,1,1,0.10,45)
				end
			elseif (cost <= 5000) then
				if (bOutfit) then
					try_spawn_item(section,1,1,0.08,60)
				elseif (bWeapon) then
					try_spawn_item(section,1,1,0.08,50)
				else
					try_spawn_item(section,1,1,0.08,50)
				end
			elseif (cost <= 10000) then
				try_spawn_item(section,1,1,0.01,90)
			elseif (cost <= 15000) then
				try_spawn_item(section,1,1,0.01,100)
			elseif (cost <= 20000) then
				try_spawn_item(section,1,1,0.01,110)
			else
				try_spawn_item(section,1,1,0.01,120)
			end
		end

		if (max_weight <= 0) then
			break
		end
	end

	if (#spawned_item > 0) then
		-- create map spot
		if (no_spot ~= true and level.map_has_object_spot(id,"treasure") == 0) then

--------------------------------------------------Тайники из ЧН

			hint = stash_names(hint,id)

--------------------------------------------------Тайники из ЧН

			level.map_add_object_spot_ser(id, "treasure", hint or "")
			news_manager.send_treasure(0)
		end
		caches[id] = table.concat(spawned_item,",")
	else
		caches[id] = false
	end
end


-- ////////////////////////////////////////////////////////////////////////////////////////////////
--
-- drx_create_random_stash function
--
-- ------------------------------------------------------------------------------------------------
--
--	Description:
--		- Creates a random stash
--
--	Usage:
--		drx_create_random_stash( no_spot, hint, bonus_items, bonus_lottery )
--
--	Parameters:
--		no_spot
--			-
--		hint
--			-
--		bonus_items
--			-
--		bonus_lottery
--			-
--
--	Return value (type: ):
--		ID of the stash
--
-- ------------------------------------------------------------------------------------------------
--	Modified by DoctorX
--	for DoctorX Questlines 1.6
--	Last modified October 20, 2016
-- ------------------------------------------------------------------------------------------------

-- Create random stash:
function drx_create_random_stash( no_spot, hint, bonus_items, bonus_lottery, spawn_local )

	last_secret = nil

	if ( caches_count <= 0 ) then
		return
	end

	last_secret = true

	local sim = alife( )

	-- Create a temporary table to use math.random:
	local t = {}
	local size_t = 0
	for id, v in pairs( caches ) do
		-- False means box is available:
		if ( v == false ) then
			local se_box = id and sim:object( id )

			if ( bonus_items ) then
				-- This feature only works with inventory boxes:
				if ( se_box and se_box:clsid( ) == clsid.inventory_box_s) then
					if not spawn_local or box_in_same_map(id) then
						size_t = size_t + 1
						t[size_t] = id
					end
				end
			else
				if not spawn_local or box_in_same_map(id) then
					size_t = size_t + 1
					t[size_t] = id
				end
			end
		end
	end

	local index = size_t > 0 and math.random( size_t )
	if not ( index ) then
		return
	end

	local id = t[index]
	local se_box = id and sim:object( id )
	if not ( se_box ) then
		caches[id] = nil
		caches_count = (caches_count - 1)
		return
	end

	if ( se_box:clsid( ) ~= clsid.inventory_box_s ) then
		if ( se_box:spawn_ini( ) and se_box:spawn_ini( ):section_exist( "drop_box" ) ) then

			-- Create map spot:
			if ( no_spot ~= true and level.map_has_object_spot( id, "treasure" ) == 0 ) then
				level.map_add_object_spot_ser( id, "treasure", hint or "" )
				news_manager.send_treasure( 0 )
			end

			-- Switch cache true, indicating it has treasure:
			caches[id] = true

			-- This is handled by xr_box.script:
			return

		else  -- invalid object
			caches[id] = nil
			caches_count = caches_count - 1
			return

		end
	end

	-- Switch cache true, indicating it has treasure:
	caches[id] = true

	-- Create map spot:
	if ( no_spot ~= true and level.map_has_object_spot( id, "treasure" ) == 0 ) then
		level.map_add_object_spot_ser( id, "treasure", hint or "" )
		news_manager.send_treasure( 0 )
	end

	math.random()
	math.random()
	math.random()

	local max_roll = math.random( 1, 6 )

	-- Setup possible loot table:
	local loot = {}

	-- Common:
	loot[1] = {}
	loot[2] = {}
	loot[3] = {}
-- com
	-- Fairly common:
	loot[4] = {}
	loot[5] = {}
	loot[6] = {}

	-- Uncommon:
	loot[7] = {}
	loot[8] = {}
	loot[9] = {}

	-- Rare:
	loot[10] = {}
	loot[11] = {}
	loot[12] = {}

	-- Extremely rare:
	loot[13] = {}
	loot[14] = {}
	loot[15] = {}
	
	-- CoM
	local spawned_item = bonus_items or {}
	local max_weight = ( max_roll * math.random( 1, 100 ) / 25 )
	local lottery = 0

	repeat

		lottery = math.random( 0, 6 )
		if ( lottery == 6 ) then
			lottery = (lottery + math.random( 0, 3 ))
		end

		bonus_lottery = bonus_lottery or 0

		if ( has_alife_info( "achieved_rag_and_bone" ) ) then
			bonus_lottery = (bonus_lottery + math.random( 0, 2 ))
		end

		rnd = math.random( (max_roll + lottery) )
		rnd = (rnd + bonus_lottery)
		if ( rnd > 15 ) then
			rnd = 15
		end

		max_weight = (max_weight - (rnd + 1))

		spawned_item[#spawned_item+1] = loot[rnd][math.random( #loot[rnd] )]

		if ( (max_roll - 1) >= 1 ) then
			max_roll = (max_roll - 1)
		else
			max_roll = 1
		end

	until ( max_weight <= 0 )

	local sec, se_obj, data, ammos, ct, ammo_type, ammo_section
	local ini = system_ini( )

	local m_data = alife_storage_manager.get_state()
	if not(m_data.radiated_consumables) then 
		m_data.radiated_consumables = {}
	end
	local rads = 0
	
	for i = 1, #spawned_item do

		sec = spawned_item[i]
		if ( sec ~= "" and ini:section_exist( sec ) ) then
			if utils.is_consumable(sec) and (math.random() < 0.5) then
				sec, rads = xrs_rnd_npc_loadout.radiate(sec)
			end
			se_obj = sim:create( sec, se_box.position, 0, 0, id )
			if (rads > 0) then
				m_data.radiated_consumables[se_obj.id] = rads
				rads = 0
			end
			if ( IsWeapon( nil, se_obj:clsid( ) ) ) then
				data = stpk_utils.get_weapon_data( se_obj )
				if ( data ) then

					-- Create random addon flag for weapon:
					flag = 0
					if ( ini:r_float_ex( sec, "scope_status" ) ) then
						flag = (flag + 1)
					end
					if ( ini:r_float_ex( sec, "grenade_launcher_status" ) ) then
						flag = (flag + 2)
					end
					if ( ini:r_float_ex( sec, "silencer_status" ) ) then
						flag = (flag + 4)
					end
					flag = math.random( 0, flag )

					-- Create random ammo type:
					ammos = alun_utils.parse_list( ini, sec, "ammo_class" )
					ct = ammos and #ammos
					ammo_type = ammos and ct and math.random( 0, (ct - 1) ) or 0
					ammo_section = ammo_type and ammos[(ammo_type + 1)]

					data.addon_flags = flag
					data.ammo_type = ammo_type
					data.condition = ((math.random( 70 ) + 30) / 100)
					stpk_utils.set_weapon_data( data, se_obj )

				end
			end

		else
			printf( "drx_coc_treasure_manager.script: invalid section %s", sec )

		end

	end

	return id

end

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


function try_spawn_treasure(box)
	local id = box:id()

	--printf("try_spawn_treasure [%s]",caches[id])

	if not (caches[id]) then
		return
	end

	if not (type(caches[id]) == "string") then
		return
	end

	local spawned_item = alun_utils.str_explode(caches[id],",")
	caches[id] = true

	local sec,ammos,ct,ammo_type,ammo_section
	local ini = system_ini()
	local sim = alife()
	for i=1,#spawned_item do
		sec = spawned_item[i]
		if (sec ~= "" and ini:section_exist(sec)) then

			if (utils.is_ammo(sec)) then
				create_ammo(sec,box:position(),box:level_vertex_id(),box:game_vertex_id(),id,math.random(10,30))
			else
				-- since we spawning on parent, we don't want to register object or packetdata will be inaccurate
				local se_obj = sim:create(sec,box:position(),0,0,id,false)
				if (se_obj) then
					local cls = se_obj:clsid()
					if (IsWeapon(nil,cls) and cls ~= clsid.wpn_knife_s) then
						--printf("coc_treasure_manager: item is fa")
						local data = stpk_utils.get_weapon_data(se_obj)
						if (data) then
							-- Create random addon flag for weapon
							flag = 0

							if (ini:r_float_ex(sec,"scope_status")) then
								flag = flag + 1
							end

							if (ini:r_float_ex(sec,"grenade_launcher_status")) then
								flag = flag + 2
							end

							if (ini:r_float_ex(sec,"silencer_status")) then
								flag = flag + 4
							end

							flag = math.random(0,flag)

							-- Create random ammo type
							ammos = alun_utils.parse_list(ini,sec,"ammo_class")
							ct = ammos and #ammos
							ammo_type = ammos and ct and math.random(0,ct-1) or 0
							ammo_section = ammo_type and ammos[ammo_type+1]

							data.addon_flags = flag
							data.ammo_type = ammo_type
							data.condition = (math.random(30)/100)
							stpk_utils.set_weapon_data(data,se_obj)
						end
						--printf("coc_treasure_manager: item is fa- end")
					end
					-- because we didn't register, we do it now, manually
					alife():register(se_obj)
				end
			end
		else
			printf("coc_treasure_manager.script: invalid section %s",sec)
		end
	end
end

function save(pk)
	if (USE_MARSHAL) then
		return
	end
	pk:w_u16(caches_count)
	for id,v in pairs(caches) do
		pk:w_u16(id)
		pk:w_bool(v)
	end
end

function load(pk)
	if (USE_MARSHAL) then
		return
	end
	caches_count = pk:r_u16()
	for i=1,caches_count do
		caches[pk:r_u16()] = pk:r_bool()
	end
end

function get_valid_item_sections()
	
	local eco = 1
	local config = axr_main.config
	if (config:r_value("character_creation","new_game_economy_treasure",2)) then
		eco = config:r_value("character_creation","new_game_economy_treasure",2)
		config:w_value("character_creation","new_game_economy_treasure")
	else
		eco = alife_storage_manager.get_state().economy and alife_storage_manager.get_state().economy["type"] or eco
	end
	
	local t = {}
	local ini = system_ini()
	local n = ltx:line_count("allowed_sections")
	for i=0, n-1 do
		local junk, section, value = ltx:r_line("allowed_sections" , i , "", "")
		local eco_blacklist = {}
		local block
		if value and value ~= "" then 
			block = true
			local v = alun_utils.str_explode(value,",")
			for i=1,#v do
				eco_blacklist[tonumber(v[i])] = true
			end
		end
		if ini:section_exist(section) then
			if (not block) or (block and (not eco_blacklist[eco])) then
				if (ini:r_bool_ex(section,"can_trade",true) == true) then
					if (ini:r_bool_ex(section,"quest_item",false) == false) then
						if not (string.find(section,"mp_")) then
							local name = ini:r_string_ex(section,"inv_name")
							if (name and name ~= "" and name ~= "default") then
								local cost = ini:r_float_ex(section,"cost") or 0
								if (cost > 1) then
									t[section] = cost
								end
							end
						end
					end
				end
			else
				--printf("CoC Treasure Manager | item blacklisted in progression difficulty(" .. eco .. "): " .. section)
			end
		end
	end
	

	-- List of all items in game that are not quest items
	if (DEV_DEBUG) then
		local cfg = io.open("gamedata\\valid_item_sections.ltx","w+")
		for k,v in pairs(t) do
			cfg:write(k.."\n")
		end
		cfg:close()
	end
	return t
end

function stash_names(hint,id)
	local sim = alife()
	local stash = sim:object(id)
	local stash_name = tostring(stash:name())
	if string.find(stash_name,"level_prefix") ~= nil then
		local level = sim:level_name(game_graph():vertex(stash.m_game_vertex_id):level_id())
		stash_name = string.gsub(stash_name,"level_prefix",level,1)
	end

	local name = "st_" .. stash_name .. "_name"
	local descr = "st_" .. stash_name .. "_descr"
	local new_name = game.translate_string(name)
	local new_descr = game.translate_string(descr)

	if new_name == name or descr == new_descr then
		return hint
	end

	stash_name = "%c[255,255,160,0]" .. new_name .. "\\n%c[default]" .. new_descr .. "\\n%c[160,100,100,200]" .. (hint or "")

	return stash_name
end
