
function init()
end

--------------------------------------ini---------------------------------------
function read_from_ini(ini,sec,lin,def,typ)
	if not ini then
		ini = system_ini()
	end
	if sec and lin and ini:section_exist(sec) and ini:line_exist(sec,lin) then
		if typ == 0 then
			return ini:r_bool(sec,lin)
		elseif typ == 1 then
			return ini:r_string(sec,lin)
		elseif typ == 2 then
			return ini:r_string_wq(sec,lin)
		else
			return ini:r_float(sec,lin)
		end
	else
		return def
	end
end

function collect_sections(ini,sections)
	local r,p = {},{}
	for k,v in ipairs(sections) do
		if ini:section_exist(v) then
			local n = ini:line_count(v)
			if n > 0 then
				for i = 0,n-1 do
					local res,id,val = ini:r_line(v,i,"","")
					if r[id] == nil then
						r[id] = val
					end
				end
			end
			p[k] = n
		else
			p[k] = 0
		end
	end
	return r,p
end

function parse_list(ini,sec,val,convert)
	local tmp = str_explode(",",read_from_ini(ini,sec,val,"",1),true)
	if convert and #tmp ~= 0 then
		local t = {}
		for i,v in ipairs(tmp) do
			t[v] = true
		end
		return t
	end
	return tmp
end

local ranks
function get_rank_list()
	if ranks then
		return ranks
	end
	local tmp = parse_list(nil,"game_relations","rating")
	ranks = {}
	for i,rn in ipairs(tmp) do
		if not tonumber(rn) then
			table.insert(ranks,rn)
		end
	end
	return ranks
end


local communities
function get_communities_list()
	if communities then
		return communities
	end
	local tmp = parse_list(nil,"game_relations","communities")
	communities = {}
	for i,cn in ipairs(tmp) do
		if not tonumber(cn) then
			table.insert(communities,cn)
		end
	end
	return communities
end

--------------------------------------str---------------------------------------
function trim(s)
	return (string.gsub(s,"^%s*(.-)%s*$","%1"))
end

function str_explode(div,str,clear)
	local t = {}
	local cpt = string.find(str,div,1,true)
	if cpt then
		repeat
			if clear then
				table.insert(t,trim(string.sub(str,1,cpt-1)))
			else
				table.insert(t,string.sub(str,1,cpt-1))
			end
			str = string.sub(str,cpt+string.len(div))
			cpt = string.find(str,div,1,true)
		until cpt == nil
	end
	if clear then
		table.insert(t,trim(str))
	else
		table.insert(t,str)
	end
	return t
end

function vec_to_str(vec)
	if vec == nil then return "nil" end
	return string.format("[%d:%d:%d]",vec.x,vec.y,vec.z)
end

--------------------------------------class---------------------------------------
function item_is_fa(o,c)
	if not c then
		c = o and o:clsid()
	end
	local t = {
	[clsid.wpn_pm_s] = true,
	[clsid.wpn_walther_s] = true,
	[clsid.wpn_usp45_s] = true,
	[clsid.wpn_hpsa_s] = true,
	[clsid.wpn_bm16_s] = true,
	[clsid.wpn_shotgun_s] = true,
	[clsid.wpn_auto_shotgun_s] = true,
	[clsid.wpn_ak74_s] = true,
	[clsid.wpn_lr300_s] = true,
	[clsid.wpn_groza_s] = true,
	[clsid.wpn_val_s] = true,
	[clsid.wpn_vintorez_s] = true,
	[clsid.wpn_svu_s] = true,
	[clsid.wpn_svd_s] = true,
	[clsid.wpn_rg6_s] = true,
	[clsid.wpn_rpg7_s] = true,
	[clsid.wpn_knife_s] = true}
	if c and t[c] then
		return true
	end
	return false
end

actor_clsid = clsid.script_actor
function is_actor(o,c)
	if not c then
		c = o and o:clsid()
	end
	return c == actor_clsid
end

weapon_types_clslist = {
pistol = {[clsid.wpn_pm_s] = true,[clsid.wpn_walther_s] = true,[clsid.wpn_usp45_s] = true,[clsid.wpn_hpsa_s] = true,[clsid.wpn_lr300_s] = true},
sniper = {[clsid.wpn_svu_s] = true,[clsid.wpn_svd_s] = true,[clsid.wpn_vintorez_s] = true},
launcher = {[clsid.wpn_rg6_s] = true,[clsid.wpn_rpg7_s] = true},
shotgun = {[clsid.wpn_shotgun_s] = true,[clsid.wpn_auto_shotgun_s] = true},
rifle = {[clsid.wpn_ak74_s] = true,[clsid.wpn_groza_s] = true,[clsid.wpn_val_s] = true},
double_barreled = {[clsid.wpn_bm16_s] = true},
knife = {[clsid.wpn_knife_s] = true}}

--------------------------------------sch---------------------------------------
function add_anim(npc,anim,move)
	if anim then
		npc:add_animation(anim,true,false)
	end
end

function get_sound(snd)
	if snd then
		return sound_object(snd)
	end
end

--------------------------------------net------------------------------------------
local stpk = net_packet()

function get_weapon_data(sobj)
	if not sobj then
		return {}
	end
	stpk:w_begin(0)
	sobj:STATE_Write(stpk)
	local size = stpk:w_tell()
	stpk:r_seek(2)
	local t = {}
	parse_object_packet(t,stpk,size)
	parse_visual_packet(t,stpk,size)
	parse_item_packet(t,stpk,size)
	parse_item_weapon_packet(t,stpk,size)
	return t
end

function parse_object_packet(ret,stpk)
	ret.gvid = stpk:r_u16()
	ret.obf32u1 = stpk:r_float()
	ret.obs32u2 = stpk:r_s32()
	ret.lvid = stpk:r_s32()
	ret.oflags = stpk:r_s32()
	ret.custom = stpk:r_stringZ()
	ret.sid = stpk:r_s32()
	ret.obs32u3 = stpk:r_s32()
	return ret
end

function parse_visual_packet(ret,stpk)
	ret.visual = stpk:r_stringZ()
	ret.vsu8u1 = stpk:r_u8()
	return ret
end

function parse_item_packet(ret,stpk)
	ret.condition = stpk:r_float()
	ret.upgrades = readvu32stringZ(stpk)
	return ret
end

function parse_item_weapon_packet(ret,stpk)
	ret.ammo_current = stpk:r_u16()
	ret.ammo_elapsed = stpk:r_u16()
	ret.weapon_state = stpk:r_u8()
	ret.addon_flags = stpk:r_u8()
	ret.ammo_type = stpk:r_u8()
	ret.xz1 = stpk:r_u8()
	return ret
end

function readvu8uN(packet,n)
	local v = {}
	for i=1,n,1 do
		table.insert(v,packet:r_u8())
	end
	return v
end

function set_weapon_data(t,sobj)
	if sobj then
		stpk:w_begin(0)
		fill_object_packet(t,stpk)
		fill_visual_packet(t,stpk)
		fill_item_packet(t,stpk)
		fill_item_weapon_packet(t,stpk)
		local size = stpk:w_tell()
		stpk:r_seek(2)
		sobj:STATE_Read(stpk,size)
	end
end

function fill_object_packet(ret,stpk)
	stpk:w_u16(ret.gvid)
	stpk:w_float(ret.obf32u1)
	stpk:w_s32(ret.obs32u2)
	stpk:w_s32(ret.lvid)
	stpk:w_s32(ret.oflags)
	stpk:w_stringZ(ret.custom)
	stpk:w_s32(ret.sid)
	stpk:w_s32(ret.obs32u3)
end

function fill_visual_packet(ret,stpk)
	stpk:w_stringZ(ret.visual)
	stpk:w_u8(ret.vsu8u1)
end

function fill_item_packet(ret,stpk)
	stpk:w_float(ret.condition)
	writevu32stringZ(stpk,ret.upgrades)
	return ret
end

function fill_item_weapon_packet(ret,stpk)
	stpk:w_u16(ret.ammo_current)
	stpk:w_u16(ret.ammo_elapsed)
	stpk:w_u8(ret.weapon_state)
	stpk:w_u8(ret.addon_flags)
	stpk:w_u8(ret.ammo_type)
	stpk:w_u8(ret.xz1)
	return ret
end

function writevu8uN(pk,v)
	local len = table.getn(v)
	for i=1,len,1 do
		pk:w_u8(v[i])
	end
end

function readvu32stringZ(packet)
	local v = {}
	local len = packet:r_s32()
	for i=1,len,1 do
		table.insert(v,packet:r_stringZ())
	end
	return v
end

function writevu32stringZ(pk,v)
	if v == nil then
		v = {}
	end
	local len = #v
	pk:w_s32(len)
	for i=1,len,1 do
		pk:w_stringZ(v[i])
	end
end

--------------------------------------addons---------------------------------------
function get_addon_status(wpn,addon)
	if addon == "sc" then
		return wpn:weapon_scope_status()
	elseif addon == "sl" then
		return wpn:weapon_silencer_status()
	elseif addon == "gl" then
		return wpn:weapon_grenadelauncher_status()
	end
	return 0
end

local rep_mem = {}

function get_addon_flag(wpn,with_int)
	local id,tg = wpn:id(),time_global()
	if tg == rep_mem.tg and rep_mem.id == id and rep_mem.wi == with_int then
		return rep_mem.fl
	else
		local flag = 0
		if wpn:weapon_is_scope() then
			if with_int or get_addon_status(wpn,"sc") == 2 then
				flag = 1
			end
		end
		if wpn:weapon_is_silencer() then
			if with_int or get_addon_status(wpn,"sl") == 2 then
				flag = flag+4
			end
		end
		if wpn:weapon_is_grenadelauncher() then
			if with_int or get_addon_status(wpn,"gl") == 2 then
				flag = flag+2
			end
		end
		rep_mem = {tg = tg,id = id,wi = with_int,fl = flag}
		return flag
	end
end

function addon_attached(wpn,addon,flag)
	local ft = {sc = {[1] = true,[3] = true,[5] = true,[7] = true},
				sl = {[4] = true,[5] = true,[6] = true,[7] = true},
				gl = {[2] = true,[3] = true,[6] = true,[7] = true}}
	if ft[addon] then
		return ft[addon][flag or get_addon_flag(wpn,true)] == true
	end
	return false
end

--------------------------------------ai-----------------------------------------
function npc_in_cover(npc)
	local st = rx_ai.get_storage(npc:id(),"in_cover")
	local tg = time_global()
	if (st.wait or 0) < tg then
		st.wait = tg+300
		local be = npc:best_enemy()
		local enemies = {}
		if be and not xr_wounded.is_wounded(be) then
			enemies[1] = be
		else
--			rx_ai.printf("npc_in_cover[%s]:not be",npc:character_name())
			st.evn = true
			return st.evn
		end
		local tt = {}
		for o in npc:memory_visible_objects() do
			local obj = o:object()
			local id = obj:id()
			if obj and obj:alive() and npc:relation(obj) == game_object.enemy and (IsStalker(obj) or IsMonster(obj) or rx_utils.is_actor(obj)) and not xr_wounded.is_wounded(obj) then
--				rx_ai.printf("npc_in_cover[%s]:add enemy[%s]",npc:character_name(),obj:name())
				table.insert(enemies,obj)
				tt[id] = true
			end
		end
		for o in npc:memory_sound_objects() do
			local obj = o:object()
			local id = obj:id()
			if not tt[id] then
				if obj and obj:alive() and npc:relation(obj) == game_object.enemy and (IsStalker(obj) or IsMonster(obj) or rx_utils.is_actor(obj)) and not xr_wounded.is_wounded(obj) then
--					rx_ai.printf("npc_in_cover[%s]:add enemy[%s]",npc:character_name(),obj:name())
					table.insert(enemies,obj)
				end
			end
		end
		for i,enemy in ipairs(enemies) do
			local dist = npc:position():distance_to_sqr(enemy:position())
			local seez = enemy:see(npc) or npc:see(enemy)
			local dir,cover = enemy:position():sub(npc:position())
			if npc:body_state() == move.crouch then
				 cover = level.low_cover_in_direction(npc:level_vertex_id(),dir)
			else
				 cover = level.high_cover_in_direction(npc:level_vertex_id(),dir)
			end
			if dist < 25 or (seez and (dist < 80 or cover > 0.4 or (cover > 0.2 and dist < 600))) then
--				rx_ai.printf("npc_in_cover[%s]:enemy![dist = %s,seez = %s,cover = %s]",npc:character_name(),dist,tostring(seez),cover)
				st.evn = false
				st.wait = tg+2000
				return st.evn
			end
		end
		st.evn = true
	end
	return st.evn
end

function eat_medkit(npc,medkit)
	local ms = medkit:section()
	npc:eat(medkit)
	local time = read_from_ini(nil,ms,"boost_time",1)
	local health_restore = read_from_ini(nil,ms,"boost_health_restore")
	local bleeding_restore = read_from_ini(nil,ms,"boost_bleeding_restore")
	if health_restore then
		npc.health = health_restore*time*10
	end
	if bleeding_restore then
		npc.bleeding = bleeding_restore*time*10
	end
end

function IsTrader(npc)
	local st = rx_ai.get_storage(npc:id())
	if st.is_trader == nil then
		local trader = false
		if npc:character_community() == "trader" or npc:clsid() == clsid.script_trader or npc:clsid() == clsid.trader then
			trader = true
		end
		if string.find(npc:section(),"trader") then
			trader = true
		end
		local cini = db.storage[npc:id()].ini
		local logic = db.storage[npc:id()].section_logic
		if not logic and not trader then
			return false
		end
		if cini and logic and cini:section_exist(logic) and cini:line_exist(logic,"trade") then
			trader = true
		end
		st.is_trader = trader
	end
	return st.is_trader == true
end

--------------------------------------output---------------------------------------
function give_game_news(t,d)
	if db.actor then
		db.actor:give_game_news("",t,"ui_iconsTotal_grouping",0,d,0)
	end
end

--------------------------------------weapon---------------------------------------
function get_weapon(npc)
	return rx_wmgr and rx_wmgr.get_wm(npc):get_best_weapon() or npc:best_weapon()
end

--------------------------------------switch---------------------------------------
function switch_online(id)
	if id == -1 then return end
	local sim = alife()
	if sim then
		sim:set_switch_online(id,true)
		sim:set_switch_offline(id,false)
	end
end

function switch_offline(id)
	local sim = alife()
	if sim then
		sim:set_switch_online(id,false)
		sim:set_switch_offline(id,true)
	end
end

----------------alun utils--------------
function read_from_ini2(ini,section,line,var_type,default,caller)
	if not (ini) then
		ini = system_ini()
	end

	if (section and line and ini:section_exist(section) and ini:line_exist(section,line)) then
		if (var_type == "bool") then
			return ini:r_bool(section,line)
		elseif (var_type == "string") then
			return ini:r_string(section,line)
		elseif (var_type == "float") then
			return ini:r_float(section,line)
		else
			return ini:r_string_wq(section,line)
		end
	else
		return default
	end
end

function parse_list2(ini,key,val,convert)
	local str = read_from_ini2(ini,key,val,"string","")
	local t = str and str ~= "" and str_explode2(str,",")
	if not (t) then
		return
	end
	if (convert and #t > 0) then
		local l = {}
		for i,v in ipairs(t) do
			l[v] = true
		end
		return l
	end
	return t
end

function str_explode2(str,pattern)
	local t = {}
	if (type(str) ~= "string") then return end
	for word, pat, start in str:split(pattern) do
		t[#t+1] = trim(word)
		if (start and pat == pattern) then
		    t[#t+1] = trim(str:sub(start))
			break
		end
	end
	return t
end

function string:split(pat)
	pat = pat or '%s+'
	local st, g = 1, self:gmatch("()("..pat..")")
	local function getter(self, segs, seps, sep, cap1, ...)
		st = sep and seps + #sep
		return self:sub(segs, (seps or 0) - 1), cap1 or sep, ...
	end
	local function splitter(self)
		if st then return getter(self, st, g()) end
	end
	return splitter, self
end

function item_is_explosive(o,c)
	if not c then
		c = o and o:clsid()
	end
	local t = {
	[clsid.obj_explosive_s] = true}
	if c and t[c] then
		return true
	end
	return false
end