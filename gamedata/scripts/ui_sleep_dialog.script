-- =======================================================================================
-- Modified by Tronex
-- Last modification: 2018/5/23
-- Prevent sleeping abuse of Ironman Life Granter feature
-- =======================================================================================

local sleep_control = nil
local wide = false
class "sleep_dialog" (CUIScriptWnd)
function sleep_dialog:__init() super()
	self:SetWndRect(Frect():set(0,0,1024,768))
	if(device().width/device().height>(1024/768+0.01)) then
		wide = true
	end
	
	self:SetAutoDelete(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_sleep_dialog.xml")

	self.back = xml:InitStatic("background", self)
--	self.sleep_static = xml:InitSleepStatic("sleep_static", self.back)

	self.sleep_static = xml:InitStatic("sleep_static", self.back)
	self.sleep_static2 = xml:InitStatic("sleep_static", self.back)
	self.static_cover = xml:InitStatic("static_cover", self.back)
	self.st_marker = xml:InitStatic("st_marker", self.static_cover)

	self.sleep_st_tbl = {}
	for i = 1, 24 do
		self.sleep_st_tbl[i] = xml:InitStatic("sleep_st_"..i, self.back)
	end

	self.time_track = xml:InitTrackBar("time_track", self.back)
	self:Register(self.time_track, "time_track")

	self.btn_sleep = xml:Init3tButton("btn_sleep", self.back)
	self:Register(self.btn_sleep, "btn_sleep")

	self.btn_cancel = xml:Init3tButton("btn_cancel", self.back)
	self:Register(self.btn_cancel, "btn_cancel")

	self.sleep_mb = CUIMessageBoxEx()
	self.sleep_mb:SetAutoDelete(true)
	self:Register(self.sleep_mb, "sleep_mb")
--------------------------------------------------------------------------------
	self:AddCallback("btn_sleep", ui_events.BUTTON_CLICKED, self.OnButtonSleep, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.OnButtonCancel, self)
	self:AddCallback("sleep_mb", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMessageBoxOk, self)
end

function sleep_dialog:Initialize()
	local cur_hours = level.get_time_hours()
	for i = 1, 24 do
		local hours = cur_hours + i
		if(hours>=24) then
			hours = hours - 24
		end
		self.sleep_st_tbl[i]:TextControl():SetText(hours..game.translate_string("st_sleep_hours"))
	end

	local delta = math.floor(591/24*cur_hours)
	local r = Frect():set(delta,413,591,531)
	self.sleep_static:SetTextureRect(r)
	local width = 591-delta
	if(wide) then
		width = width*0.8
	end
	self.sleep_static:SetWndSize(vector2():set(width, 118))

	r = Frect():set(0,413,delta,531)
	self.sleep_static2:SetTextureRect(r)
	local width = delta
	if(wide) then
		width = width*0.8
	end
	self.sleep_static2:SetWndSize(vector2():set(width, 118))

	local pos = self.sleep_static2:GetWndPos()
	pos.x = self.sleep_static:GetWndPos().x+self.sleep_static:GetWidth()
	self.sleep_static2:SetWndPos(pos)
end

function sleep_dialog:__finalize()
	sleep_control = nil
end

function sleep_dialog:TestAndShow()
    --[[
	if (self.ph_sleepbag_id and self.item_section) then
		local sim = alife()
		sim:create(self.item_section,db.actor:position(),0,0,0)
		local se_bag = sim:object(self.ph_sleepbag_id)
		if (se_bag) then
			sim:release(se_bag,true)
		end
		self.ph_sleepbag_id = nil
	end
    --]]
	-- Prevent sleep if not tired, but only if sleep deprivation is enabled.
	-- If the player has drunk too many energy drinks they will be too wired to sleep.
	--[[
	if (axr_main.config:r_value("mm_options","enable_sleep_deprived",1,false) == true) then
		if (sleep_dep) then
			if (sleep_dep.caff_chk and sleep_dep.caff_chk > 0) then
				SetHudMsg(game.translate_string("st_sleep_awake_wired"),4)
				return
			elseif (sleep_dep.last_sleep and sleep_dep.no_sleep and sleep_dep.last_sleep < sleep_dep.no_sleep) then
				SetHudMsg(game.translate_string("st_sleep_awake"),4)
				return
			end
		end
	end
	--]]
	local bleeding = db.actor.bleeding > 0
	local radiation = db.actor.radiation > 0
	
	-- Prevent sleep if bleeding and/or iradiated.
	if (bleeding or radiation) then
		if (bleeding and radiation) then
			SetHudMsg(game.translate_string("st_sleep_bleeding_irradiated"),5)
		elseif (bleeding) then
			SetHudMsg(game.translate_string("st_sleep_bleeding"),4)
		elseif (radiation) then
			SetHudMsg(game.translate_string("st_sleep_irradiated"),4)
		end
		return
	end
	
-- mlr sleep only surge_hide restrictors
		surge_manager.get_surge_manager():calculate_best_surge_cover()
		local actor_hide = surge_manager.actor_in_cover()

		if not (actor_hide) then
			actor_hide = tent_sleep()
		end
			
	--if (xr_conditions.surge_started() or psi_storm_manager.is_started()) then
		if not (actor_hide) then
			SetHudMsg(game.translate_string("st_cant_sleep_find_shelter_mlr"),4)
			return
		end
	--end	
--mlr
	
	self:Initialize()
	self:ShowDialog(true)
end

function tent_sleep()
	--printf("TENT search started")
	for i=1,65535 do
		local zx = alife():object(i)
		if zx then
			local zn = level.object_by_id(zx.id)
			if zn then
				local cfm = zn:section()
				if cfm == "ph_tent" then
					local tent_distance = zn:position():distance_to(db.actor:position())
					--printf("TENT found " .. tostring(tent_distance))
					if tent_distance < 1.5 then
						return true
					end
					return false
				end
			end
		end
	end
end

function sleep_dialog:Update()
	CUIScriptWnd.Update(self)
	if self:IsShown() then
		local sleep_time = self.time_track:GetIValue()-1
		local x = math.floor(591/24*sleep_time)
		if(x==0) then
			x = 5
		end
		if(wide) then
			x = x*0.8
		end
		self.st_marker:SetWndPos(vector2():set(x, 0))
	end
end

function sleep_dialog:OnTrackButton()
end

function sleep_dialog:OnButtonSleep()
	if self:IsShown() then
		self:HideDialog()
	end
	utils.save_var(db.actor,"heli_enemy_flag",nil)
	xr_effects.disable_ui(db.actor, nil)
	level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "ui_sleep_dialog.dream_callback")
	level.add_pp_effector("sleep_fade.ppe", 11, false)
	_G.mus_vol = get_console():get_float("snd_volume_music")
	_G.amb_vol = get_console():get_float("snd_volume_eff")
	get_console():execute("snd_volume_music 0")
	get_console():execute("snd_volume_eff 0")
	if self.forced then
		level.add_cam_effector("camera_effects\\surge_02.anm", 10, false, "ui_sleep_dialog.dream_callback")
	else
		level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "ui_sleep_dialog.dream_callback")
		get_console():execute("snd_volume_music 0")
		get_console():execute("snd_volume_eff 0")
		
		
		
		local flist = getFS():file_list_open_ex("$game_saves$",	bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*".. ui_load_dialog.saved_game_extension)
		local f_cnt = flist and flist:Size() or 0
   
		local inc = 0
		if (f_cnt > 0) then
			flist:Sort(FS.FS_sort_by_modif_down)
		
			for it=0, f_cnt-1 do
				local file_name = flist:GetAt(it):NameFull():sub(0,-6):lower()
				
				-- grab last modified quicksave increment count
				local d = tonumber( string.match(file_name,"sleep_autosave(%d+)") )
				if (d) then
					inc = d
					break 
				end
			end
		end
	
		inc = inc >= axr_main.config:r_value("mm_options","quicksave_cnt",2,5) and 1 or inc + 1
	end
	level.add_pp_effector("surge_fade.ppe", 11, false) --sleep_fade.ppe
	db.actor:give_info_portion("actor_is_sleeping")

end

function sleep_dialog:OnButtonCancel()
	if (self:IsShown()) then
		self:HideDialog()
	end
	--db.actor:give_info_portion("tutorial_sleep")
	disable_info("actor_is_sleeping")
	disable_info("sleep_active")
end

function sleep_dialog:OnMessageBoxOk()
	db.actor:give_info_portion("tutorial_sleep")
	disable_info("actor_is_sleeping")
	disable_info("sleep_active")
end

--------------------------------------------------------------------------------
function dream_callback()
	if sleep_control.forced then
		level.add_cam_effector("camera_effects\\surge_01.anm", 10, false, "ui_sleep_dialog.dream_callback2")
	else
		level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "ui_sleep_dialog.dream_callback2")
	end
	
	local hours = sleep_control.forced or sleep_control.time_track:GetIValue()
	printf("dream_callback hours=%s",hours)
    
	-->> added, sleeping will increase thirst level (if the feature is enabled)
	if ((db.actor:has_info("force_slp")==false) and (axr_main.config:r_value("mm_options","enable_thirst_option",1,true))) then
		-- log("Increased thirst due to sleep on: " .. hours*(drink.in_hour/2) .. " Thirsty before: " .. drink.last_drink)
		drink.last_drink = math.ceil(drink.last_drink + hours*(drink.in_hour/2))
		if drink.last_drink < 0 then drink.last_drink = 0 elseif drink.last_drink > 1000 then drink.last_drink = 1000 end
	end
	
	level.change_game_time(0,hours,0)
	ironman_manager.set_sleep_hrs(hours) -->> part added
	
	surge_manager.get_surge_manager().time_forwarded = true
	psi_storm_manager.get_psi_storm_manager().time_forwarded = true
		
	if(surge_manager.is_started() and level_weathers.get_weather_manager().weather_fx) then
		level.stop_weather_fx()
	end
	level_weathers.get_weather_manager():forced_weather_change()
	db.actor.power = 1
end

function dream_callback2()
	xr_effects.enable_ui(db.actor, nil)
	get_console():execute("snd_volume_music "..tostring(_G.mus_vol))
	get_console():execute("snd_volume_eff "..tostring(_G.amb_vol))
	-->>
	local comm = lanforse_extra.get_special_txt(db.actor:character_community())
	local map = lanforse_extra.get_special_txt(level.name())
	get_console():execute("save " .. comm .. " - " .. map .. " - sleep")
	
	_G.amb_vol = 0
	_G.mus_vol = 0
	disable_info("tutorial_sleep")
	disable_info("actor_is_sleeping")
	disable_info("sleep_active")
	--mlr
	--if (axr_main.config:r_value("mm_options","enable_robbery_at_sleep_option",1,true) == true) then
	--dialogs_mlr.control()
	--end
	--mlr	
end

function sleep()
	if (sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
	end
	sleep_control.forced = nil
	sleep_control.time_track:SetCurrentValue()
	sleep_control:TestAndShow()
end

function sleep_forced(hours)
	if(sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
	end
	sleep_control.forced = hours or math.random(3,9)
	sleep_control:OnButtonSleep()
end

function main()
	sleep()
end

function sleep_bag(ph_sleepbag_id,sec)
	if (sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
	end
	sleep_control.forced = nil
	sleep_control.item_section = sec
	sleep_control.ph_sleepbag_id = ph_sleepbag_id
	sleep_control.time_track:SetCurrentValue()
	sleep_control:TestAndShow()
	return sleep_control
end
