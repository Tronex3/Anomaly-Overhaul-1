
-- =======================================================================================
-- Created by Tronex
-- Last modification: 2018/7/20
-- Anomaly Maps UI
-- =======================================================================================



--=======================================< Map UI >=======================================--
class "map_ui" (CUIScriptWnd)

function map_ui:__init(owner,obj,section) super()
	self.owner = owner
	self.section = section
	self.object = obj
	
	self.map = system_ini():r_string_ex(section,"use_map") or "l07_military"
	self.maps = xr_statistic.actor_anomaly_maps or {}
	if (self.map ~= "nil") and (not self.maps[self.map]) then
		self.maps[self.map] = true
		trx_utils.set_msg("st_new_anomaly_map",true)
	end
	
	self.index = 1
	self.indexes = {}
	for k,v in pairs (self.maps) do
		if (v == true) then
			self.indexes[#self.indexes+1] = k
		end
	end
	
	self:InitControls()
	self:InitCallBacks()
end

function map_ui:__finalize()
end

function map_ui:InitControls()
	self:SetWndRect			(Frect():set(0,0,1024,768))
	self:SetAutoDelete(true)
	
	self.xml				= CScriptXmlInit()
	local xml = self.xml
	xml:ParseFile			("ui_itm_main.xml")

	self.dialog	= xml:InitStatic("itm_map:frame", self)
	self.dialog:InitTexture("ui_itm_map_frame")
	self.dialog:SetStretchTexture(true)
	trx_utils.adjust_main_ui(self.dialog)
	
	self.box_map = xml:InitStatic("itm_map:box_map",self.dialog)
	self.box_map:InitTexture("ui_itm_map_" .. self.indexes[self.index])
	self.box_map:SetStretchTexture(true)
	trx_utils.adjust_ui(self.box_map)
	
	-- Map name
	self.text_map = xml:InitTextWnd("itm_map:text_map", self.dialog)
	trx_utils.adjust_ui(self.text_map)
	self.text_map:SetText(game.translate_string(self.indexes[self.index]))

	-- Button Ok
	self.btn_ok_pic = xml:InitStatic("itm_map:btn_ok_pic", self.dialog)
	self.btn_ok_pic:InitTexture("ui_button_ordinary_h")
	self.btn_ok_pic:SetStretchTexture(true)
	trx_utils.adjust_ui(self.btn_ok_pic)
	
	self.btn_ok = xml:Init3tButton("itm_map:btn_ok", self.dialog)
	trx_utils.adjust_ui(self.btn_ok)
	self:Register(self.btn_ok,"btn_ok")
	
	if (#self.indexes > 1) then
		-- Button Next
		self.btn_next_pic = xml:InitStatic("itm_map:btn_next_pic", self.dialog)
		self.btn_next_pic:InitTexture("ui_button_ordinary_h")
		self.btn_next_pic:SetStretchTexture(true)
		trx_utils.adjust_ui(self.btn_next_pic)
		
		self.btn_next = xml:Init3tButton("itm_map:btn_next", self.dialog)
		trx_utils.adjust_ui(self.btn_next)
		self:Register(self.btn_next,"btn_next")
		
		-- Button Previous
		self.btn_previous_pic = xml:InitStatic("itm_map:btn_previous_pic", self.dialog)
		self.btn_previous_pic:InitTexture("ui_button_ordinary_h")
		self.btn_previous_pic:SetStretchTexture(true)
		trx_utils.adjust_ui(self.btn_previous_pic)
		
		self.btn_previous = xml:Init3tButton("itm_map:btn_previous", self.dialog)
		trx_utils.adjust_ui(self.btn_previous)
		self:Register(self.btn_previous,"btn_previous")
	end
end

function map_ui:InitCallBacks()
	self:AddCallback("btn_ok", ui_events.BUTTON_CLICKED, self.OnAccept, self)
	self:AddCallback("btn_next", ui_events.BUTTON_CLICKED, self.OnNext, self)
	self:AddCallback("btn_previous", ui_events.BUTTON_CLICKED, self.OnPrevious, self)
end


---------------< Callbacks >---------------

function map_ui:OnNext()
	self.index = self.index + 1
	if (self.index > #self.indexes) then
		self.index = 1
	end
	trx_utils.play_sound("interface\\inv_page")
	self.box_map:InitTexture("ui_itm_map_" .. self.indexes[self.index])
	self.text_map:SetText(game.translate_string(self.indexes[self.index]))
end

function map_ui:OnPrevious()
	self.index = self.index - 1
	if (self.index == 0) then
		self.index = #self.indexes
	end
	trx_utils.play_sound("interface\\inv_page")
	self.box_map:InitTexture("ui_itm_map_" .. self.indexes[self.index])
	self.text_map:SetText(game.translate_string(self.indexes[self.index]))
end

function map_ui:OnAccept()
	trx_utils.play_sound("interface\\inv_close")
	self:HideDialog()
end

function map_ui:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (res == false) then
		local bind = dik_to_bind(dik)
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if (dik == DIK_keys.DIK_ESCAPE) then
				self:OnAccept()
			elseif (dik == DIK_keys.DIK_D) and (#self.indexes > 1) then
				self:OnNext()
			elseif (dik == DIK_keys.DIK_A) and (#self.indexes > 1) then
				self:OnPrevious()
			elseif (dik == DIK_keys.DIK_RIGHT) and (#self.indexes > 1) then
				self:OnNext()
			elseif (dik == DIK_keys.DIK_LEFT) and (#self.indexes > 1) then
				self:OnPrevious()
			end
		end
	end
	return res
end