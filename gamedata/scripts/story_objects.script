-- Lua class for managing story_objects.
-- edited Alundaio 12-1-2013

class "story_objects_registry"
function story_objects_registry:__init ()
	self.story_id = {}
end

function story_objects_registry:register(obj_id , story_obj_id)
	if (self.story_id[story_obj_id] and self.story_id[story_obj_id] ~= obj_id) then
		printf("Multiple objects trying to use same story_id %s",story_obj_id)
		return
	end

	self.story_id[story_obj_id] = obj_id
end

function story_objects_registry:unregister_by_id(obj_id)
	for story_id,id in pairs(self.story_id) do
		if (id == obj_id) then
			self.story_id[story_id] = nil
		end
	end
end

function story_objects_registry:unregister_by_story_id(story_id)
	self.story_id[story_id] = nil
end

function story_objects_registry:get(story_obj_id)
	if ( type(story_obj_id) == "number"	) then
		return self:get_story_id(story_obj_id)
	end

	return self.story_id[story_obj_id] or axr_dynamic_spawn and axr_dynamic_spawn.dynamic_story_id and axr_dynamic_spawn.dynamic_story_id[story_obj_id]
end

function story_objects_registry:get_story_id(obj_id)
	if ( type(obj_id) == "string" ) then
		return self:get(obj_id)
	end

	for story_id,id in pairs(self.story_id) do
		if (id == obj_id) then
			return story_id
		end
	end

	if (axr_dynamic_spawn and axr_dynamic_spawn.dynamic_story_id) then
		for story_id,id in pairs(axr_dynamic_spawn.dynamic_story_id) do
			if (id == obj_id) then
				return story_id
			end
		end
	end
end

function story_objects_registry:save(sstpk)

end

function story_objects_registry:load(sstpk,size)

end

function get_story_objects_registry()
	if story_obj_registry == nil then
		story_obj_registry = story_objects_registry()
	end
	return story_obj_registry
end

function check_spawn_ini_for_story_id(se_obj)
	if (axr_dynamic_spawn and axr_dynamic_spawn.dynamic_story_id) then
		for story_id,id in pairs(axr_dynamic_spawn.dynamic_story_id) do
			if (se_obj.id == id) then
				se_obj.dynamic_name = story_id
				return
			end
		end
	end

	local sor = get_story_objects_registry()

	--printf("checking obj[%s] for story_id!!!",se_obj:name())
	local spawn_ini = se_obj:spawn_ini()
	if (spawn_ini and spawn_ini:section_exist("story_object")) then
		local result, id, value
		result, id, value	= spawn_ini:r_line("story_object",0,"","")
		if (id and id ~= "") then
			-- support for:
			-- [story_object]
			-- story_id = some_story_id_string
			-- ***or***
			-- [story_object]
			-- some_story_id_string
			if (id == "story_id" and value ~= "") then
				sor:register(se_obj.id , value)
			else	
				sor:register(se_obj.id, id)
			end
		end
		return
	end

	local spawn_sect = se_obj:section_name()
	local story_id = system_ini():r_string_ex(spawn_sect,"story_id")
	if story_id ~= nil then
		sor:register(se_obj.id , story_id)
		return
	end
end
