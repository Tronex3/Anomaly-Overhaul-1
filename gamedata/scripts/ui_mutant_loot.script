-- ui_loot
-- Alundaio
-- ponney68
--[[
   Copyright (C) 2012 Alundaio

   This program is free software; you can redistribute and/or modify
   it under the terms of the Open S.T.A.L.K.E.R. Mod License version 1.0.
-]]
-- =======================================================================================
-- Modified by Tronex
-- Last modification: 2018/7/27
-- Added Loot all button, organized script
-- =======================================================================================

local ico_size, ico_width, rw, rh, _le = 1,1,1,1,50

--=======================================< List Item >=======================================--
class "load_item" (CUIListBoxItem)
function load_item:__init(height) super(height)
	self.file_name		= "filename"

	self:SetTextColor(GetARGB(255, 170, 170, 170))

	self.fn = self:GetTextItem()
	self.fn:SetFont(GetFontLetterica25())	--(GetFontLetterica18Russian()) 
	self.fn:SetEllipsis(true)
end

function load_item:__finalize()
end


--=======================================< Mutant Loot UI >=======================================--
class "loot_ui" (CUIScriptWnd)

function loot_ui:__init(owner,obj,for_bug1,for_bug2) super()
	self.owner = owner
	
	ico_size, ico_width, rw, rh, _le = trx_utils.get_ui_settings()
	
	local function is_number(var)
		local function lets_try(var)
			var = tonumber(var)
			return (var > 0) or (var < 0) or var or -var
		end
		if pcall(function() lets_try(var) end) then
			return true
		else
			return false
		end
	end

	if not (is_number(obj)) then 
		self.section = obj:section()	
		self.clsid = obj:clsid()
		self.id = obj:id()
		self.obj = obj
	else 	
		self.id = obj		
		self.section=for_bug1
		self.clsid = for_bug2
		self.obj = nil		
	end

	self:InitControls()
	self:InitCallBacks()
	
	self:FillList()
end

function loot_ui:__finalize()
end

function loot_ui:InitControls()
	self:SetWndRect			(Frect():set(0,0,1024,768))

	self:SetAutoDelete(true)

	self.xml				= CScriptXmlInit()
	self.xml:ParseFile			("ui_itm_main.xml")

	local ctrl					= CUIWindow()
	ctrl:SetAutoDelete(true)
	
	self.xml:InitWindow			("mutant_loot:file_item:main",0,ctrl)
	self.file_item_main_sz	= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	self.xml:InitWindow			("mutant_loot:file_item:fn",0,ctrl)
	self.file_item_fn_sz	= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	self.xml:InitWindow			("mutant_loot:file_item:fd",0,ctrl)
	self.file_item_fd_sz	= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	self.form				= self.xml:InitStatic("mutant_loot:form",self)
	self.form:InitTexture("ui_loot_window")
	self.form:SetStretchTexture(true)
	trx_utils.adjust_main_ui(self.form)

	-- Mutant image
	self:SetMutantImage()

	-- Item Icon
	self.icon 				= self.xml:InitStatic("mutant_loot:form:icon",self.form)
	trx_utils.adjust_ui(self.icon)
	
	self.icon_temp			= self.xml:InitStatic("mutant_loot:form:icon",self.form)
	trx_utils.adjust_ui(self.icon_temp)

	-- List Box
	self.list_frame 		= self.xml:InitStatic("mutant_loot:form:list_frame",self.form)
	self.list_frame:InitTexture("ui_mutant_loot_frame")
	self.list_frame:SetStretchTexture(true)
	trx_utils.adjust_ui(self.list_frame)

	self.list_box			= self.xml:InitListBox("mutant_loot:form:list",self.form)
	trx_utils.adjust_ui(self.list_box)
	self.list_box:ShowSelectedItem	(true)
	self:Register(self.list_box, "list_window")

	-- Button Loot one
	self.btn_loot_one_pic = self.xml:InitStatic("mutant_loot:form:btn_loot_pic", self.form)
	self.btn_loot_one_pic:InitTexture("ui_button_ordinary_e")
	self.btn_loot_one_pic:SetStretchTexture(true)
	trx_utils.adjust_ui(self.btn_loot_one_pic)
	
	self.btn_loot_one = self.xml:Init3tButton("mutant_loot:form:btn_loot",self.form)
	trx_utils.adjust_ui(self.btn_loot_one)
	self:Register(self.btn_loot_one, "button_loot")
	
	-- Button Loot all
	self.btn_loot_all_pic = self.xml:InitStatic("mutant_loot:form:btn_loot_all_pic", self.form)
	self.btn_loot_all_pic:InitTexture("ui_button_ordinary_e")
	self.btn_loot_all_pic:SetStretchTexture(true)
	trx_utils.adjust_ui(self.btn_loot_all_pic)
	
	self.btn_loot_all = self.xml:Init3tButton("mutant_loot:form:btn_loot_all",self.form)
	trx_utils.adjust_ui(self.btn_loot_all)
	self:Register(self.btn_loot_all, "button_loot_all")
	
	-- Button Cancel
	self.btn_cancel_pic = self.xml:InitStatic("mutant_loot:form:btn_cancel_pic", self.form)
	self.btn_cancel_pic:InitTexture("ui_button_ordinary_e")
	self.btn_cancel_pic:SetStretchTexture(true)
	trx_utils.adjust_ui(self.btn_cancel_pic)
	
	self.btn_cancel = self.xml:Init3tButton("mutant_loot:form:btn_cancel",self.form)
	trx_utils.adjust_ui(self.btn_cancel)
	self:Register(self.btn_cancel, "button_cancel")
end

function loot_ui:SetMutantImage()
	-- ponney68: This table based on "species" of mutants
	local killed_mutant_tbl =
	{

	-- TRX: A-Life Revamp
	    psysucker			= {file="ui\\ui_actor_monsters_pda_3",x="393",y="0",type="small"},
    	lurker				= {file="ui\\ui_actor_monsters_pda_3",x="0",y="0",type="small"},
     	karlik				= {file="ui\\ui_actor_monsters_pda_3",x="0",y="200",type="small"},
	
	    snork				= {file="ui\\ui_actor_monsters_pda",x="393",y="0",type="small"},
		dog					= {file="ui\\ui_actor_monsters_pda",x="0",y="800",type="small"},
		pseudodog			= {file="ui\\ui_actor_monsters_pda",x="393",y="200",type="small"},
		psy_dog				= {file="ui\\ui_actor_monsters_pda",x="393",y="200",type="small"},
		poltergeist			= {file="ui\\ui_actor_monsters_pda",x="0",y="400",type="small"},
		bloodsucker			= {file="ui\\ui_actor_monsters_pda",x="393",y="400",type="human"},
		controller			= {file="ui\\ui_actor_monsters_pda",x="393",y="800",type="human"},
		chimera				= {file="ui\\ui_actor_monsters_pda",x="0",y="600",type="large"},
		tushkano			= {file="ui\\ui_actor_monsters_pda",x="0",y="0",type="small"},
		rat					= {file="ui\\ui_actor_monsters_pda",x="0",y="0",type="small"},
		flesh				= {file="ui\\ui_actor_monsters_pda",x="393",y="600",type="large"},
		tark				= {file="ui\\ui_actor_monsters_pda_2",x="0",y="0",type="human"},
		rotan				= {file="ui\\ui_actor_monsters_pda",x="0",y="0",type="human"},
		burer				= {file="ui\\ui_actor_monsters_pda_1",x="0",y="0",type="large"},
		boar				= {file="ui\\ui_actor_monsters_pda_1",x="393",y="0",type="large"},
		giant				= {file="ui\\ui_actor_monsters_pda_1",x="0",y="200",type="large"},
		cat					= {file="ui\\ui_actor_monsters_pda_2",x="0",y="0",type="small"},
		fracture			= {file="ui\\ui_actor_monsters_pda_2",x="393",y="200",type="human"},
		bird				= {file="ui\\ui_actor_monsters_pda_2",x="393",y="0",type="small"},
		zombie				= {file="ui\\ui_actor_monsters_pda_2",x="0",y="200",type="human"},
		bloodsucker_arena	= {file="ui\\ui_actor_monsters_pda",x="393",y="400",type="human"},
		burer_arena			= {file="ui\\ui_actor_monsters_pda_1",x="0",y="0",type="large"},
		pseudodog_arena		= {file="ui\\ui_actor_monsters_pda",x="393",y="200",type="small"},
		snork_arena			= {file="ui\\ui_actor_monsters_pda",x="393",y="0",type="human"},
	}

	local mutant_id = game.translate_string(system_ini():r_string_ex(self.section,"species") or "")
	--printf("-MUTANT:"..mutant_id)

	local mutant_f = "ui\\ui_actor_monsters_pda_1"
	local mutant_x = 0
	local mutant_y = 0

	mutant_f = tostring(killed_mutant_tbl[mutant_id].file)
	mutant_x = tostring(killed_mutant_tbl[mutant_id].x)
	mutant_y = tostring(killed_mutant_tbl[mutant_id].y)

	local x1 = mutant_x
	local y1 = mutant_y
	local mutant_width = 393
	local mutant_height = 200

	local x2 = x1 + mutant_width
	local y2 = y1 + mutant_height

	self.image			= self.xml:InitStatic("mutant_loot:form:image",self.form)
	self.image:InitTexture(tostring(mutant_f))
	self.image:SetTextureRect(Frect():set(x1,y1,x2,y2))
	self.image:SetStretchTexture(true)
	trx_utils.adjust_ui(self.image)
end

function loot_ui:InitCallBacks()
	self:AddCallback("button_loot",ui_events.BUTTON_CLICKED,self.OnButton_LootOne,self)
	self:AddCallback("button_loot_all",ui_events.BUTTON_CLICKED,self.OnButton_LootAll,self)
	self:AddCallback("button_cancel",ui_events.BUTTON_CLICKED,self.OnButton_Cancel,self)
	
	self:AddCallback("list_window",ui_events.LIST_ITEM_CLICKED,self.OnListItemClicked,self)
	self:AddCallback("list_window",ui_events.WINDOW_LBUTTON_DB_CLICK,self.OnListItemDbClicked,self)
end

---------------< Callbacks >---------------
function loot_ui:OnListItemClicked()
	if self.list_box:GetSize()==0 then return end

	local item = self.list_box:GetSelectedItem()

	if not (item) then
		return
	end
	
	-- Icon
	local ico = trx_utils.get_item_axis(item.sec)
	self.icon:InitTexture("ui\\ui_icon_equipment")
	self.icon:SetTextureRect(Frect():set(ico.x1, ico.y1, ico.x2, ico.y2))
	self.icon:SetStretchTexture(true)
	
	local pos = self.icon_temp:GetWndPos()
	local _w = self.icon_temp:GetWidth()
	local _h = self.icon_temp:GetHeight()
	
	local ratio = ico.w/ico.h
	local h, w
	ico.w = ico.w * ico_size * ico_width
	ico.h = ico.h * ico_size
	
	local w_t, h_t = 0, 0
	local resize = false
	if (ico.w > _w) then -- if icon width is bigger than frame width
		w_t = ico.w - _w
		resize = true	
	end 
	if (ico.h > _h) then -- if icon height is bigger than frame height
		h_t = ico.h - _h 
		resize = true	
	end 
	
	if resize then -- resize is required
		if (w_t >= h_t) then -- if icon width is the big number (or square), use it as a base for resizing
			w = _w
			h = w / ratio
		elseif (w_t < h_t) then -- if icon width is the big number, use it as a base for resizing
			h = _h
			w = h * ratio
		end
	else -- no resize
		w = ico.w
		h = ico.h
	end
	
	offset_x = (_w - w)/2
	offset_y = (_h - h)/2
	self.icon:SetWndSize(vector2():set(w , h))
	self.icon:SetWndPos(vector2():set(pos.x + offset_x , pos.y + offset_y))
end

function loot_ui:OnListItemDbClicked()
	self:OnButton_LootOne()
end

function loot_ui:OnButton_LootOne()
	local item = self.list_box:GetSelectedItem()
	if not item then return end

	knife_manager.degradate()
	
	if (actor_effects) then
		local boost = (has_alife_info("achieved_well_dressed") and 1 or 0) + (db.actor:object("kit_hunt") and 1 or 0)
		if (boost == 2) then
			actor_effects.use_item("mutant_looting_boost_2")
		elseif (boost == 1) then
			actor_effects.use_item("mutant_looting_boost_1")
		else
			actor_effects.use_item("mutant_looting")
		end
	end
	xr_sound.set_sound_play(db.actor:id(),"inv_mutant_loot_animal")

	alife():create(item.sec,npc and npc:position() or db.actor:position(),0,0,npc and npc:id() or 0)
	self.loot[item.sec].count = self.loot[item.sec].count - 1
	if self.loot[item.sec].count == 0 then
		self.loot[item.sec] = nil
	end
	
	utils.save_var(self.obj,"loot",self.loot)
	xr_statistic.inc_counter("field_dressings")
	
	local is_more_loot = not is_empty(self.loot)

	if is_more_loot then
		--utils.save_var(self.obj,"looted",false)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",false)
		xr_corpse_detection.set_valuable_loot(self.id,true)
	else
		--utils.save_var(self.obj,"looted",true)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",true)
		xr_corpse_detection.set_valuable_loot(self.id,false)
	end
	if (axr_main.config:r_value("mm_options","enable_extra_animations",1,false) == false and is_more_loot) then
		self:FillList()
	else
		self:HideDialog()
	end
end

function loot_ui:OnButton_LootAll()

	local tbl = self.loot -- temp
	for sec,t in pairs(tbl) do
		for i=1,t.count do
			alife():create(sec, npc and npc:position() or db.actor:position(), 0, 0, npc and npc:id() or 0)
			self.loot[sec].count = self.loot[sec].count - 1
			if (self.loot[sec].count == 0) then
				self.loot[sec] = nil
			end
		
			utils.save_var(self.obj,"loot",self.loot)
			xr_statistic.inc_counter("field_dressings")
		end
	end
	
	if (actor_effects) then
		local boost = (has_alife_info("achieved_well_dressed") and 1 or 0) + (db.actor:object("kit_hunt") and 1 or 0)
		if (boost == 2) then
			actor_effects.use_item("mutant_looting_boost_2")
		elseif (boost == 1) then
			actor_effects.use_item("mutant_looting_boost_1")
		else
			actor_effects.use_item("mutant_looting")
		end
	end
	xr_sound.set_sound_play(db.actor:id(),"inv_mutant_loot_animal")
	
	local is_more_loot = not is_empty(self.loot)

	if is_more_loot then
		--utils.save_var(self.obj,"looted",false)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",false)
		xr_corpse_detection.set_valuable_loot(self.id,true)
	else
		--utils.save_var(self.obj,"looted",true)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",true)
		xr_corpse_detection.set_valuable_loot(self.id,false)
	end
	if (axr_main.config:r_value("mm_options","enable_extra_animations",1,false) == false and is_more_loot) then
		self:FillList()
	else
		self:HideDialog()
	end
end

function loot_ui:OnButton_Cancel()
	local is_more_loot = not is_empty(self.loot)
	
	if is_more_loot then
		--utils.save_var(self.obj,"looted",false)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",false)
		xr_corpse_detection.set_valuable_loot(self.id,true)
	else
		--utils.save_var(self.obj,"looted",true)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",true)
		xr_corpse_detection.set_valuable_loot(self.id,false)
	end
		
	self:HideDialog()	
end

function loot_ui:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (keyboard_action == ui_events.WINDOW_KEY_PRESSED) then
		if (dik == DIK_keys.DIK_ESCAPE) then 
			self:OnButton_Cancel()
		end
	end
	return true
end

---------------< Utility >---------------
function loot_ui:FillList()
	self.list_box:RemoveAll()

	--developed by Dimeyne, copied by Wafel
	self.loot = utils.load_var(self.obj,"loot",nil)
	if not self.loot then
		self.loot = {}
		itms_manager.loot_mutant(nil,self.clsid,self.loot,nil,true)
		utils.save_var(self.obj,"loot",self.loot)
	end
	local is_there_loot
	for sec,t in pairs(self.loot) do
		self:AddItemToList(sec,t.count)
		is_there_loot = true
	end
	if utils.load_var(self.obj,"looted",nil) then
		is_there_loot = false
	end

	if is_there_loot then
		self:ShowDialog(true)
	else
		local hud = get_hud()
		if (hud) then
			hud:AddCustomStatic("can_use_weapon_now", true)
			hud:GetCustomStatic("can_use_weapon_now"):wnd():TextControl():SetTextST("st_body_useless")
		end
		itms_manager.ShowMessage = true
		itms_manager.ShowMessageInit = game.get_game_time()
		itms_manager.ShowMessageTime = 20
	end
end

function loot_ui:AddItemToList(sec,count)
	local _itm			= load_item(self.file_item_main_sz.y)
	local inv_name 		= game.translate_string(system_ini():r_string_ex(sec,"inv_name") or "none")

	_itm:SetWndSize		(self.file_item_main_sz)

	_itm.fn:SetWndPos(vector2():set(0,0))
	_itm.fn:SetWndSize	(self.file_item_fn_sz)
	_itm.fn:SetText		(inv_name)

	_itm.fage			= _itm:AddTextField("x"..count, (self.file_item_fd_sz.x)*rw)
	_itm.fage:SetFont	(GetFontLetterica16Russian())
	_itm.fage:SetWndPos	(vector2():set((self.file_item_fn_sz.x+4)*rw, 0))
	_itm.fage:SetWndSize(self.file_item_fd_sz)

	_itm.sec = sec

	self.list_box:AddExistingItem(_itm)
end
