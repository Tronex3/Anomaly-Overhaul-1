----------------------
-- File:   Outfit Marauder
-- Author: Shoker
-- CoM visuals table: ziken
-- CoM script adaptation: Dimeyne
-- Снятие брони с трупов.
----------------------
-- =======================================================================================
-- Modified by Tronex
-- 2018/9/5 - Optimized script: removed actor_on_update, death manager will update outfits condition instead
-- =======================================================================================

local ini = ini_file("plugins\\item_management\\outfit_loots.ltx")
local curent_outfit = {}
local curent_helmet = {}

local visuals = {}
function prepare_visuals()
	local n = ini:line_count("outfits_for_loots") or 0
	for i=0, n-1 do
		local result, id, value = ini:r_line("outfits_for_loots" , i , "", "")
		visuals[id] = {}
		if value and value ~= "" then
			local v = alun_utils.str_explode(value,",") or {}
			if v and v[1] and system_ini():section_exist(v[1]) then visuals[id][1] = v[1] end
			if v and v[2] and system_ini():section_exist(v[2]) then visuals[id][2] = v[2] end
		end
	end
end

function get_outfit_sections(visual)
	local s_name = alun_utils.str_explode(visual,"\\")
	local v_name = s_name[3]
	local t_vis = visuals[v_name]
	if t_vis then
		return t_vis[1], t_vis[2]
	end
end

function update() -- called from Death Manager
	if (axr_main.config:r_value("mm_options","enable_outfit_drop",1,true) ~= true) then	
		return
	end
	
	for k,v in pairs(curent_outfit) do
		local outfit_obj = level.object_by_id(k)
		if outfit_obj then
			outfit_obj:set_condition(utils.mean_random(10,32,v,7)/100)
			curent_outfit[k] = nil
		end
	end
	for k,v in pairs(curent_helmet) do
		local helmet_obj = level.object_by_id(k)
		if helmet_obj then
			helmet_obj:set_condition(utils.mean_random(10,30,v,7)/100)
			curent_helmet[k] = nil
		end
	end
end


--==============================================< Callbacks >==============================================
function on_game_start()
	prepare_visuals()
	
	local function on_game_load()
		if (axr_main.config:r_value("mm_options","enable_outfit_drop",1,true) == true) then	
			RegisterScriptCallback("npc_on_death_callback", npc_on_death_callback)
		end
	end
	RegisterScriptCallback("on_game_load",on_game_load)
end

function activate_feature()
	RegisterScriptCallback("npc_on_death_callback", npc_on_death_callback)
end

function deactivate_feature()
	UnregisterScriptCallback("npc_on_death_callback", npc_on_death_callback)
end

function npc_on_death_callback(npc)
	local npc_rank = ranks.get_obj_rank_name(npc)
	if (npc_rank ~= nil) then
	
		if npc_rank == "novice" then
			for k,v in pairs(curent_outfit) do
				local outfit_obj = level.object_by_id(k)
				if outfit_obj then
					outfit_obj:set_condition(utils.mean_random(2,18,v,7)/100)
					curent_outfit[k] = nil
				end
			end
			for k,v in pairs(curent_helmet) do
				local helmet_obj = level.object_by_id(k)
				if helmet_obj then
					helmet_obj:set_condition(utils.mean_random(2,8,v,7)/100)
					curent_helmet[k] = nil
				end
			end
			
		elseif npc_rank == "trainee" then
			for k,v in pairs(curent_outfit) do
				local outfit_obj = level.object_by_id(k)
				if outfit_obj then
					outfit_obj:set_condition(utils.mean_random(3,25,v,7)/100)
					curent_outfit[k] = nil
				end
			end
			for k,v in pairs(curent_helmet) do
				local helmet_obj = level.object_by_id(k)
				if helmet_obj then
					helmet_obj:set_condition(utils.mean_random(3,10,v,7)/100)
					curent_helmet[k] = nil
				end
			end	
			
		elseif npc_rank == "experienced" then
			for k,v in pairs(curent_outfit) do
				local outfit_obj = level.object_by_id(k)
				if outfit_obj then
					outfit_obj:set_condition(utils.mean_random(4,28,v,7)/100)
					curent_outfit[k] = nil
				end
			end
			for k,v in pairs(curent_helmet) do
				local helmet_obj = level.object_by_id(k)
				if helmet_obj then
					helmet_obj:set_condition(utils.mean_random(4,20,v,7)/100)
					curent_helmet[k] = nil
				end
			end	

		elseif npc_rank == "professional" then
			for k,v in pairs(curent_outfit) do
				local outfit_obj = level.object_by_id(k)
				if outfit_obj then
					outfit_obj:set_condition(utils.mean_random(5,30,v,7)/100)
					curent_outfit[k] = nil
				end
			end
			for k,v in pairs(curent_helmet) do
				local helmet_obj = level.object_by_id(k)
				if helmet_obj then
					helmet_obj:set_condition(utils.mean_random(5,23,v,7)/100)
					curent_helmet[k] = nil
				end
			end		

		elseif npc_rank == "veteran" then
			for k,v in pairs(curent_outfit) do
				local outfit_obj = level.object_by_id(k)
				if outfit_obj then
					outfit_obj:set_condition(utils.mean_random(10,30,v,7)/100)
					curent_outfit[k] = nil
				end
			end
			for k,v in pairs(curent_helmet) do
				local helmet_obj = level.object_by_id(k)
				if helmet_obj then
					helmet_obj:set_condition(utils.mean_random(10,26,v,7)/100)
					curent_helmet[k] = nil
				end
			end		

		elseif npc_rank == "expert" then
			for k,v in pairs(curent_outfit) do
				local outfit_obj = level.object_by_id(k)
				if outfit_obj then
					outfit_obj:set_condition(utils.mean_random(15,35,v,7)/100)
					curent_outfit[k] = nil
				end
			end
			for k,v in pairs(curent_helmet) do
				local helmet_obj = level.object_by_id(k)
				if helmet_obj then
					helmet_obj:set_condition(utils.mean_random(15,29,v,7)/100)
					curent_helmet[k] = nil
				end
			end		

		elseif npc_rank == "master" then
			for k,v in pairs(curent_outfit) do
				local outfit_obj = level.object_by_id(k)
				if outfit_obj then
					outfit_obj:set_condition(utils.mean_random(25,35,v,7)/100)
					curent_outfit[k] = nil
				end
			end
			for k,v in pairs(curent_helmet) do
				local helmet_obj = level.object_by_id(k)
				if helmet_obj then
					helmet_obj:set_condition(utils.mean_random(22,35,v,7)/100)
					curent_helmet[k] = nil
				end
			end		

		elseif npc_rank == "legend" then
			for k,v in pairs(curent_outfit) do
				local outfit_obj = level.object_by_id(k)
				if outfit_obj then
					outfit_obj:set_condition(utils.mean_random(25,40,v,7)/100)
					curent_outfit[k] = nil
				end
			end
			for k,v in pairs(curent_helmet) do
				local helmet_obj = level.object_by_id(k)
				if helmet_obj then
					helmet_obj:set_condition(utils.mean_random(20,40,v,7)/100)
					curent_helmet[k] = nil
				end
			end					
		end
	end	
	
	local comm = npc:character_community()
	local coef = xrs_rnd_npc_loadout.get_comb_coeff(npc_rank,comm)^0.44
	local visual = npc:get_visual_name()
	local outfit_section, helmet_section = get_outfit_sections(visual)	
	
	if outfit_section then
		local se_outfit = alife():create(outfit_section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
		curent_outfit[se_outfit.id] = coef
	end
	if helmet_section then
		local se_helmet = alife():create(helmet_section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
		curent_helmet[se_helmet.id] = coef
	end
	return
end
