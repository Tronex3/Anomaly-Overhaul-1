
-- =======================================================================================
-- Remade by Tronex
-- Last modification: 2018/7/28
-- Cooking UI
-- =======================================================================================



--=======================================< Controls >=======================================--
local ico_size = 1
local ico_width = (device().width / device().height > (1024/768+0.01)) and 0.8 or 1
local ini = system_ini()


--=======================================< List Item >=======================================--
class "list_element" (CUIListBoxItem)

function list_element:__init(sec, id, tier) super(sec, id, tier)
	
	self.sec					= sec
	self.id						= id
	self.tier					= tier
	
	self.text					= self:GetTextItem()
	self.text:SetWndRect		(Frect():set(0,0,300,22))
	self:SetTextColor			(GetARGB(255, 170, 170, 170))
	self.text:SetFont			(GetFontLetterica16Russian())
	self.text:SetWndSize		(vector2():set(400, 22))
	self.text:SetEllipsis		(true)
	self.text:SetText			(alun_utils.get_inv_name(self.sec) or "")
end

function list_element:__finalize()
end


--=======================================< Crafting UI >=======================================--
class "cook_ui" (CUIScriptWnd)

function cook_ui:__init(owner,obj,section) super()
	self.owner = owner
	self.section = section
	self.obj = obj
	
	self.cooking_frame 			   = ini:r_string_ex(section,"cooking_ui") or "ui_itm_cook"
	self.cooking_tier              = ini:r_float_ex(section,"cooking_tier") or 1
	self.cooking_campfire          = ini:r_bool_ex(section,"cooking_campfire") or false
	self.cooking_campfire_tier     = ini:r_float_ex(section,"cooking_campfire_tier") or 1
	self.cooking_limited		   = ini:r_bool_ex(self.section,"cooking_limited") or false
	self.cooking_fuel              = ini:r_string_ex(section,"cooking_fuel")
	self.cooking_fuel			   = self.cooking_fuel and alun_utils.str_explode(self.cooking_fuel,",") or {}
	self.cooking_campfire_close    = trx_utils.get_nearby_campfire(1.5, false) or false
	self.cooking_use_actor_effects = ini:r_bool_ex(section,"cooking_use_actor_effects") or true
	self.active_wep				   = db.actor:active_item() or false
	
	if (not self.cooking_campfire) and (not self.cooking_fuel) then
		return
	end
	
	self:InitControls()
	self:InitCallBacks()
	
	if self.active_wep then
		db.actor:hide_weapon()
	end
end

function cook_ui:__finalize()
end

function cook_ui:InitControls()
	self:SetWndRect			(Frect():set(0,0,1024,768))
	self:SetAutoDelete(true)
	
	self.xml				= CScriptXmlInit()
	local xml = self.xml
	xml:ParseFile			("ui_items.xml")

	self.dialog					= xml:InitStatic("itm_cook:frame", self)
	self.dialog:InitTexture(self.cooking_frame)
	self.dialog:SetStretchTexture(true)

	self.list = {} -- List of items
	self.box_item = {} -- Item's Icon
	self.box_item_temp = {} -- temp item
	self.text_item = {} -- Item's Name
	for i=1,2 do
		xml:InitStatic("itm_cook:cap_" .. tostring(i),self.dialog)
		--xml:InitStatic("itm_cook:frame_list_" .. tostring(i),self.dialog)
		--xml:InitStatic("itm_cook:frame_item_" .. tostring(i),self.dialog)
		
		self.list[i] = xml:InitListBox("itm_cook:list_" .. tostring(i),self.dialog)
		self.list[i]:ShowSelectedItem(true)
		self.list[i]:Show(true)
		self:Register(self.list[i], "list_" .. tostring(i))
		
		self.box_item[i] = xml:InitStatic("itm_cook:box_item_" .. tostring(i) , self.dialog)
		self.box_item_temp[i] = xml:InitStatic("itm_cook:box_item_" .. tostring(i) , self.dialog)
		
		self.text_item[i] = xml:InitTextWnd("itm_cook:text_item_" .. tostring(i) , self.dialog)
	end
	
	-- Main Buttons
	local btn
	btn = xml:Init3tButton("itm_cook:btn_cook", self.dialog)
	self:Register(btn,"btn_cook")
	
	btn = xml:Init3tButton("itm_cook:btn_cancel", self.dialog)
	self:Register(btn,"btn_cancel")
	
	self:LoadItemList_1()
end

function cook_ui:InitCallBacks()
	self:AddCallback("btn_cook", ui_events.BUTTON_CLICKED, self.OnCook, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.OnCancel, self)
	self:AddCallback("list_1", ui_events.LIST_ITEM_CLICKED, self.OnItemClicked_1, self)
	self:AddCallback("list_2", ui_events.LIST_ITEM_CLICKED, self.OnItemClicked_2, self)
end

function cook_ui:LoadItemList_1()
	self.list[1]:RemoveAll()
	
	if self.cooking_campfire and self.cooking_campfire_close then
		local _itm = list_element("itm_campfire", nil, self.cooking_campfire_tier)
		_itm:SetTextColor(GetARGB(255, 200, 150, 100))
		self.list[1]:AddExistingItem(_itm)
	end
	
	local function fill_list(actor,obj)
		for i=1,#self.cooking_fuel do
			if (obj:section() == self.cooking_fuel[i]) then
				local _itm = list_element(obj:section(), obj:id(), self.cooking_tier)
				self.list[1]:AddExistingItem(_itm)
			end
		end
	end
	db.actor:iterate_inventory(fill_list,db.actor)
end

function cook_ui:LoadItemList_2()
	self.list[2]:RemoveAll()

	if (self.list[1]:GetSize() == 0) then return end

	local fuel = self.list[1]:GetSelectedItem()
	if (not fuel) then
		return
	end

	local function fill_list(actor,obj)
		if ini:r_bool_ex(obj:section(),"cooking_part") then
			local itm_tier = ini:r_float_ex(obj:section(),"cooking_part_tier")
			if itm_tier and (itm_tier <= fuel.tier) then
				local _itm = list_element(obj:section(), obj:id(), itm_tier)
				self.list[2]:AddExistingItem(_itm)
			end
		end
	end

	db.actor:iterate_inventory(fill_list,db.actor)
end


---------------< Callbacks >---------------
function cook_ui:OnItemClicked_1()
	self:OnItemSelect(1)
end
function cook_ui:OnItemClicked_2()
	self:OnItemSelect(2)
end
function cook_ui:OnItemSelect(n)
	local item = self.list[n]:GetSelectedItem()
	
	if (n == 1) then self:LoadItemList_2() end
	
	-- Text (Name)
	local name = alun_utils.get_inv_name(item.sec)
	self.text_item[n]:SetText(name)
	
	-- Icon
	local ico = trx_utils.get_item_axis (item.sec)
	self.box_item[n]:InitTexture("ui\\ui_icon_equipment")
	self.box_item[n]:SetTextureRect(Frect():set(ico.x1, ico.y1, ico.x2, ico.y2))
	self.box_item[n]:SetStretchTexture(true)
	
	local pos = self.box_item_temp[n]:GetWndPos()
	local _w = self.box_item_temp[n]:GetWidth()
	local _h = self.box_item_temp[n]:GetHeight()
	
	local ratio = ico.w/ico.h
	local h, w
	ico.w = ico.w * ico_size * ico_width
	ico.h = ico.h * ico_size
	
	local w_t, h_t = 0, 0
	local resize = false
	if (ico.w > _w) then -- if icon width is bigger than frame width
		w_t = ico.w - _w
		resize = true	
	end 
	if (ico.h > _h) then -- if icon height is bigger than frame height
		h_t = ico.h - _h 
		resize = true	
	end 
	
	if resize then -- resize is required
		if (w_t >= h_t) then -- if icon width is the big number (or square), use it as a base for resizing
			w = _w
			h = w / ratio
		elseif (w_t < h_t) then -- if icon width is the big number, use it as a base for resizing
			h = _h
			w = h * ratio
		end
	else -- no resize
		w = ico.w
		h = ico.h
	end
	
	offset_x = (_w - w)/2
	offset_y = (_h - h)/2
	self.box_item[n]:SetWndSize(vector2():set(w , h))
	self.box_item[n]:SetWndPos(vector2():set(pos.x + offset_x , pos.y + offset_y))
	
	-- Reset supportive item when you choose main item
	if (n == 1) then
		self.box_item[2]:InitTexture("ui\\ui_icon_equipment")
		self.box_item[2]:SetTextureRect(Frect():set(0, 0, 0, 0))
		self.text_item[2]:SetText("")
	end
end

function cook_ui:OnCook()

	-- Campfire check
	local fuel = self.list[1]:GetSelectedItem()
	local meal = self.list[2]:GetSelectedItem()
	if (not fuel) or (not meal) then return end
	
	local obj_fuel, obj_meal, result
	local is_campfire = fuel and (fuel.sec == "itm_campfire") or false
	
	-- Load item 1 (fuel)
	if (fuel.id) then 
		obj_fuel = level.object_by_id(fuel.id)
		if (not obj_fuel) then
			return
		end
	elseif (not fuel.id) and (not is_campfire) then
		return
	end
	
	-- Load item 2 (meal)
	result = ini:r_string_ex(meal.sec,"cooking_result")
	local obj_meal = meal.id and level.object_by_id(meal.id)
	if (not obj_meal) or (not result) or (not ini:section_exist(result)) then
		return
	end
	
	-- Release old items, give new meal
	if (not is_campfire) then
		if (not trx_utils.adjust_item_charge(obj_fuel,-1)) then
			trx_utils.release_obj(obj_fuel)
		end
	end
	trx_utils.release_obj(obj_meal)
	alife():create(result, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
		
	if self.cooking_limited then
		if (not trx_utils.adjust_item_charge(self.obj,-1)) then
			trx_utils.release_obj(self.obj)
		end
	end
	
	-- Play effect
	if (self.cooking_use_actor_effects and actor_effects) then
		local itm_base = ini:r_string_ex(self.section,"uses_base")
		itm_base = itm_base or self.section
		actor_effects.use_item(itm_base .. "_dummy")
		--level_weathers.get_weather_manager():forced_weather_change()
	end
	db.actor:restore_weapon()
	
	-- Hide dialog
	self:HideDialog()
end

function cook_ui:OnCancel()
	db.actor:restore_weapon()
	self:HideDialog()
end

function cook_ui:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (res == false) then
		local bind = dik_to_bind(dik)
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				self:OnCancel()
			end
		end
	end
	return res
end