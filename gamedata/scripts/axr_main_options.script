-- =======================================================================================
-- Modified by Tronex
-- Added new gameplay options (Last Day 2018/2/18)
-- AI die in anomalies, debug_hud_map, Full A-Life Simulation, Thirst Simulation, art_degrade, reward multi-pliers
-- Removed hardcore save options from appearing, instead they can be controlled from axr_options.ltx (Anomaly 2018/7/17)
-- =======================================================================================

-- Extensions to Game Options


--- IMPORTANT! SEE opt_menu_on_init to add a new game options (new as of 5/28/2016)

function opt_menu_on_init(menu)
	-- simply add new line and a ui_mm_<name> in ui_st_mm.xml to create a new option. Script automatically does the rest for you
	-- debug_hud
    
	if DEV_DEBUG then
	menu.gameplay_options["debug_hud"]			= {default=false, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and xrs_debug_tools) then
			if (ctrl:GetCheck()) then
				xrs_debug_tools.deactivate_feature()
			else 
				xrs_debug_tools.deactivate_feature()
			end
		end
	end}
	
	-- debug_hud_map
	menu.gameplay_options["debug_map_hud"]			= {default=false, 	debug_only=true, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and ui_map_debug_ex) then
			if (ctrl:GetCheck()) then
				ui_map_debug_ex.activate_feature()
			else 
				ui_map_debug_ex.deactivate_feature()
			end
		end
	end}	
	end
	
    -- localization
	menu.gameplay_options["localization"] = 	{default = "eng",	debug_only = false,	typ = "list",	list = {"eng","rus"},
		on_accept=function(handler,optMgr,ctrl)
			local language = ctrl:GetText()
			if (language and language ~= "") then
				local loc_ini = ini_file_ex("localization.ltx",true)
				if (loc_ini:r_value("string_table","language") ~= language) then
					loc_ini:w_value("string_table","language",language)
					loc_ini:save()
					menu.b__require_restart = true
				end
			end
		end
	}
	
	-- AI die in anomalies
	menu.gameplay_options["ai_die_in_anomaly"] = {default = false, debug_only = false, typ = "check", on_accept = function(handler,optMgr,ctrl)
		local con = get_console()
		if (ctrl:GetCheck()) then
			con:execute("ai_die_in_anomaly 1")
		else
			con:execute("ai_die_in_anomaly 0")
		end
	end}
	
	-- Full A-Life Simulation
	menu.gameplay_options["sim_on_all_levels"] = {default = false, debug_only = false, typ = "check", on_accept = function(handler,optMgr,ctrl)
		if _G.DEACTIVATE_SIM_ON_NON_LINKED_LEVELS == axr_main.config:r_value("mm_options","enable_sim_on_all_levels",1,false) then
			menu.b__require_restart = true
		end
	end}
	
	-- slot Hud
	menu.gameplay_options["slot_hud"]		= {default=false, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and slot_hud) then
			if (ctrl:GetCheck()) then
				slot_hud.activate_hud()
			else
				slot_hud.deactivate_hud()
			end
		end
	end}
	-- slot Hud
	if (slot_hud) then
		menu.gameplay_options["slot_hud"]		= {default=false, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
			if (level.present() and slot_hud) then
				if (ctrl:GetCheck()) then
					slot_hud.activate_hud()
				else
					slot_hud.deactivate_hud()
				end
			end
		end}
	end
	
	-- Hardcore AI Aim
	menu.gameplay_options["hardcore_ai_aim"]		= {default=false, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		local con = get_console()
		if (ctrl:GetCheck()) then
			con:execute("ai_aim_max_angle 20.0")
				con:execute("ai_aim_min_angle 17.0")
				con:execute("ai_aim_min_speed 2.5")
				con:execute("ai_aim_predict_time 0.28")
			else
				con:execute("ai_aim_max_angle 0.7854")
				con:execute("ai_aim_min_angle 0.19635")
				con:execute("ai_aim_min_speed 0.24")
				con:execute("ai_aim_predict_time 0.40")
		end
	end}
	
	-- Hardcore Economy
	menu.gameplay_options["hardcore_economy"]		= {default=false, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (ctrl:GetCheck()) then
			hardcore_economy.activate_feature()
		else
			hardcore_economy.deactivate_feature()
		end
	end}
	
	-- Dynamic Anomalies
	menu.gameplay_options["dynamic_anomalies"]		= {default=false, 	debug_only=false, 	typ="check"}
	
	-- Disguise feature
	menu.gameplay_options["disguise_system"]	= {default=true, debug_only=false, typ="check", on_accept=function(handler,optMgr,ctrl)
		if (ctrl:GetCheck()) then
			disguise.activate_feature()
		else
			disguise.deactivate_feature()
		end
	end}
	
	-- Autosave every 15 minutes
	menu.gameplay_options["autosave_every_15_min"]	= {default=true, debug_only=false, typ="check", on_accept=function(handler,optMgr,ctrl)
		if (ctrl:GetCheck()) then
			autosave_on_interval.activate_feature()
		else
			autosave_on_interval.deactivate_feature()
		end
	end}
	
	--mlr
    -- show_enemy_health
	menu.gameplay_options["show_enemy_health"]	= {default=false, 	debug_only=false, 	typ="check"}	
	-- rob money in sleep
	menu.gameplay_options["robbery_at_sleep_option"] = {default=true,  debug_only=false, 	typ="check"}
    -- show repu in tips
	menu.gameplay_options["show_tip_reputation_option"] = {default=true,  debug_only=false, 	typ="check"}		
    -- outfit drop
	menu.gameplay_options["outfit_drop"]		= {default=true, 	debug_only=false, 	typ="check"}		
    -- open all transitions
	menu.gameplay_options["transitions_closed_disable"]	= {default=false, 	debug_only=false, 	typ="check"}
    -- news
	menu.gameplay_options["fake_news_option"] = {default=true,  debug_only=false, 	typ="check"}	
    -- lootmoney
	menu.gameplay_options["lootmoney_option"] = {default=false,  debug_only=false, 	typ="check"}
	-- weapon loot
	menu.gameplay_options["rank_loot_option"] = {default=false,  debug_only=false, 	typ="check"}	
    -- radio_mod
	menu.gameplay_options["radio_mod"]			= {default=true, 	debug_only=false, 	typ="check"}
	-- mechanic_feature
	menu.gameplay_options["mechanic_feature"]	= {default=true, 	debug_only=false, 	typ="check"}
	-- heli_engine_sound
	menu.gameplay_options["heli_engine_sound"]	= {default=true, 	debug_only=false, 	typ="check"}
	-- heli_spawn
	menu.gameplay_options["heli_spawn"]			= {default=true, 	debug_only=false, 	typ="check"}
	-- radiation in daytime
    menu.gameplay_options["dark_mode"]			= {default=true, 	debug_only=false, 	typ="check"}
	-- use batteries
	menu.gameplay_options["use_battery"]		= {default=true, 	debug_only=false, 	typ="check"}
	-- Enable HUD masks
	menu.gameplay_options["mask_hud"]			= {default=true, 	debug_only=false, 	typ="check"}
	-- enchanted shoot effects
	menu.gameplay_options["shoot_effect"]		= {default=true, 	debug_only=false, 	typ="check"}

	-- Enable actor animations
	menu.gameplay_options["extra_animations"]	= {default=true, 	debug_only=false, 	typ="check"}

	if DEV_DEBUG then
		menu.gameplay_options["debug_autosave"]		= {default=false, 	debug_only=false, 	typ="check"}
	end

    menu.gameplay_options["awr_disassembly"] 	= {default=true,  debug_only=false, 	typ="check"}
	
	-- Thirst simulation
	menu.gameplay_options["thirst_option"] = {default=true,  debug_only=false, 	typ="check"}
	
	-- release dropped items 
	menu.gameplay_options["release_dropped_items"]	= {default=true, 	debug_only=false, 	typ="check"}
    
	-- multiplier for money rewards
	menu.gameplay_options["multi_rewards_money"]			= {default=1.0, 	debug_only=false, 	typ="list", list={0.50,0.75,1.0,1.25,1.5,2.0,3.0}}
	
	-- multiplier for earned goodwill
	menu.gameplay_options["multi_rewards_goodwill"]			= {default=1.0, 	debug_only=false, 	typ="list", list={0.50,0.75,1.0,1.25,1.5,2.0,3.0}}
	
	
	-- dynamic_news
	menu.gameplay_options["dynamic_news"]		= {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and dynamic_news_manager) then 
			if (ctrl:GetCheck()) then 
				dynamic_news_manager.get_dynamic_news()
			else
				dynamic_news_manager.destroy_dynamic_news()
			end
		end	
	end}
	-- sleep_deprived
	menu.gameplay_options["sleep_deprived"]		= {default=false, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and sleep_dep) then
			if (ctrl:GetCheck()) then
				sleep_dep.activate_feature()
			else 
				sleep_dep.deactivate_feature()
			end
		end
	end}
	
	-- art_degrade
	menu.gameplay_options["art_degrade"]		= {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and artefact_degradation) then
			if (ctrl:GetCheck()) then
				artefact_degradation.activate_feature()
			else
				artefact_degradation.deactivate_feature()
			end
		end
	end}
	
	-- I do not recommend allowing a factor greater than 1.5 because there are not enough smart terrain jobs
	menu.gameplay_options["alife_mutant_pop"]			= {default=1.0, 	debug_only=false, 	typ="list", list={0.25,0.50,0.75,1.00,1.25,1.50}}
	menu.gameplay_options["alife_stalker_pop"]			= {default=0.75, 	debug_only=false, 	typ="list", list={0.25,0.50,0.75,1.00,1.25,1.50}}
	if DEV_DEBUG then
    menu.gameplay_options["debug_autosave_interval"]	= {default=1, 	    debug_only=false, 	typ="list", list={1,5,10,15,20}}
	end
	
	-- excl_dist
	-- note: shouldn't be greater than switch distance or no simulation squads will come online. Instead it should create a border zone between excl_dist and switch_distance where stuff can come online
	-- so that when actor walks stuff will naturally come online but if squad teleports very close to actor it will stay offline until player walks far enough away.
	menu.gameplay_options["excl_dist"]			= {default=75, 		debug_only=true, 	typ="list", list={0,25,50,75,100}}  
	
	-- quicksave_cnt
	menu.gameplay_options["quicksave_cnt"]		= {default=3, 		debug_only=false, 	typ="list", list={1,5,10,15,20}}
	
	if (db.actor) then -- Options will only show while in-game
	
		--[[ local l = get_character_icon_list()
		local selected = nil 
		
		menu.gameplay_options["char_portrait"]	= {default=db.actor_binder.character_icon or "ui_inGame2_Strelok", debug_only=false, typ="list", list=l, 
			on_accept=function(handler,optMgr,ctrl)
				if (selected) then
					db.actor_binder.character_icon = ctrl:GetText()
					if (axr_main.config:r_value("mm_options","enable_outfit_portrait",1,false)) then
						local outfit = db.actor:item_in_slot(7)
						if (outfit == nil) then
							db.actor:set_character_icon(db.actor_binder.character_icon)
						end
					else 
						db.actor:set_character_icon(db.actor_binder.character_icon)
					end
				end
			end, 
			on_list_item_select=function(handler,ctrl)
				selected = ctrl:GetText()
				if (handler.char_icon) then
					handler.char_icon:InitTexture(selected)
				end
			end
		} --]]
		
		menu.gameplay_options["outfit_portrait"]	= {default=false, 	debug_only=false, 	typ="check", 
			on_accept=function(handler,optMgr,ctrl)
				if (ctrl:GetCheck()) then
					local outfit = db.actor:item_in_slot(7)
					if (outfit) then 
						local icon = system_ini():r_string_ex(outfit:section(),"character_portrait")
						if (icon) then 
							db.actor:set_character_icon(icon)
						end
					end
				else 
					db.actor:set_character_icon(db.actor_binder.character_icon or "ui_inGame2_Strelok")
				end
			end
		}
		
	end
	
    -- axr option default config
    local need_save

    for k,v in pairs(menu.gameplay_options) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				if not (axr_main.config:line_exist("mm_options","enable_"..k)) then
					axr_main.config:w_value("mm_options","enable_"..k,v.default)
					need_save = true
				end
			elseif not (axr_main.config:line_exist("mm_options",k)) then
				axr_main.config:w_value("mm_options",k,v.default)
				need_save = true
			end
		end
    end
 
    if (need_save) then
        axr_main.config:save()
    end
end

function opt_menu_on_accept(menu,optMgr,console)
    for name,v in pairs(menu.gameplay_options) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				axr_main.config:w_value("mm_options","enable_"..name,v.ctrl:GetCheck())
			elseif (v.typ=="list") then 
				if (type(v.default) == "boolean") then
					axr_main.config:w_value("mm_options",name,v.ctrl:GetText()=="true" or false)
				elseif (type(v.default) == "number") then 
					axr_main.config:w_value("mm_options",name,tonumber(v.ctrl:GetText()) or v.default)
				else 
					axr_main.config:w_value("mm_options",name,v.ctrl:GetText())
				end
			end
			
			if (v.on_accept) then 
				v.on_accept(menu,optMgr,v.ctrl)
			end
		end
    end
    axr_main.config:save()
end

function opt_menu_on_set_values(menu,optMgr)
    for name,v in pairs(menu.gameplay_options) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				v.ctrl:SetCheck(axr_main.config:r_value("mm_options","enable_"..name,1,v.default))
			elseif (v.typ=="list") then
				-- so proper type is cached when reading
				if (type(v.default) == "boolean") then
					v.ctrl:SetText(axr_main.config:r_value("mm_options",name,1,v.default))
				elseif (type(v.default) == "number") then 
					v.ctrl:SetText(axr_main.config:r_value("mm_options",name,2,v.default))
				else 
					v.ctrl:SetText(axr_main.config:r_value("mm_options",name,0,v.default))
				end
			end
			if (v.on_set_values) then 
				v.on_set_values(menu,optMgr,v.ctrl)
			end
		end
    end
end

function get_character_icon_list()
	local t = {"ui_inGame2_Strelok"}
	local faction = character_community(db.actor):sub(7)
	local ini = ini_file("plugins\\faction_portraits.ltx")
	local section = faction.."_portraits"
	local n = ini:section_exist(section) and ini:line_count(section) or 0
	for i=0, n-1 do
		local result, id, value = ini:r_line(section,i,"","" )
		table.insert(t,id)
	end

	return t
end