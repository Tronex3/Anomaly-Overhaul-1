--[[
 ============================================================

 Game Relation Functions  (game_relations.script)
	DoctorX Dynamic Faction Relations 1.8

	Modified by: DoctorX, av661194
	Last revised: February 16, 2016

 ============================================================

	Modified by: Tronex
	2018/7/7 - Relation changes are done by calculating ranks and reputation of victim and killer npcs
	2018/8/3 - Added a limiter that switch off relation changes for factions with critical relations

 ============================================================

	-- the ratio of the character to the actor (or other NPC) is calculated by the formula:
	-- attitude = personal_goodwill + 				- personal attitude of the character to the actor (if not previously met, then 0)
	-- community_goodwill + 						- the relation of the grouping of the character to the actor personally (if there were no contacts before, 0)
	-- community_to_community + 					- the relation of the grouping of the character to the grouping of the actor from [communities_relations]
	-- reputation_goodwill + 						- the relation of the character's reputation to the reputation of the actor from [reputation_relations]
	-- rank_goodwill 								- the relation of rank of the character to the rank of the actor from [rank_relations]

--]]

local dynamically_change = true

local function opt_on_accept(handler,optMgr,ctrl)
	dynamically_change = ctrl:GetCheck()
end

local function menu_on_init(menu)
	menu.gameplay_options["dynamic_relation_changes"]	= {default=true, debug_only=false, typ="check", on_accept=opt_on_accept}
end

-- called directly from axr_main
function main_menu_on_quit()
	UnregisterScriptCallback("opt_menu_on_init",menu_on_init)
end

-- called directly from axr_main
function main_menu_on_init()
	RegisterScriptCallback("opt_menu_on_init",menu_on_init)
end

--========================================< Controls >========================================--
local ini_r = ini_file("plugins\\dynamic_faction_relations.ltx")
local ini_g = ini_file("creatures\\game_relations.ltx")
local factions_table = {"stalker","bandit","csky","dolg","freedom","killer","army","ecolog","monolith"}
local factions_table_all = {"actor","bandit","dolg","ecolog","freedom","killer","army","monolith","monster","stalker","zombied","csky","trader","actor_stalker","actor_bandit","actor_dolg","actor_freedom","actor_csky","actor_ecolog","actor_killer","actor_army","actor_monolith","actor_zombied","arena_enemy"}
-- ATTENTION! (factions_table_all) table must follow the same order of [communities_relations] section in game_relations.ltx file
 FRIENDS = 1000
 NEUTRALS = 0
 ENEMIES = -1000
 local friend_limit = ini_r:r_float_ex ("controls" ,"friend_limit") or 4100
 local enemy_limit = ini_r:r_float_ex ("controls" ,"enemy_limit") or -5000
 local death_value = ini_r:r_float_ex ("controls" ,"death_value") or 150
 local friend_count_limit = ini_r:r_float_ex ("controls" ,"friend_count_limit") or 3
 local enemy_count_limit = ini_r:r_float_ex ("controls" ,"enemy_count_limit") or 3
 
default_sympathy = 0.01
game_relations_by_num = {	[0] = "friend",
							[1] = "neutral",
							[2] = "enemy",
}
temp_goodwill_table = {}

-- Table of factions of unaffected relations
local blacklist = {}
local n = ini_r:line_count("unaffected_factions") or 0
for i=0, n-1 do
	local result, id, value = ini_r:r_line("unaffected_factions", i , "", "")
	blacklist[#blacklist+1] = id
	--printf(">>> TRX: blacklist[" .. #blacklist .. "] = " .. id)
end

-- Table of faction pairs of unaffected relations
local blacklist_pair = {}
n = ini_r:line_count("unaffected_pairs") or 0
for i=0, n-1 do
	local result, id, value = ini_r:r_line("unaffected_pairs", i , "", "")
	local val = tostring(value)
	local tbl = alun_utils.str_explode(val,",")
	if tbl[1] and tbl[2] then
		blacklist_pair[#blacklist_pair+1] = {tbl[1],tbl[2]}
		--printf(">>> TRX: blacklist_pair[" .. #blacklist_pair .. "] = {" .. tbl[1] .. "," .. tbl[2] .. "}")
	end
end

-- Bad reputation table, only critically bad rep have impact
local rep_enemy_table = {
	["terrible"] = 1.3,
	["really_bad"] = 1.2,
	["very_bad"] = 1.1,
	["bad"] = 1,
	["neutral"] = 1,
	["good"] = 1,
	["very_good"] = 1,
	["really_good"] = 1,
	["excellent"] = 1
}

-- Good reputation table, only critically good rep have impact
local rep_friend_table = {
	["terrible"] = 1,
	["really_bad"] = 1,
	["very_bad"] = 1,
	["bad"] = 1,
	["neutral"] = 1,
	["good"] = 1,
	["very_good"] = 1.1,
	["really_good"] = 1.2,
	["excellent"] = 1.3
}

-- Rank table, lower to higher, higher ranks have higher impact
local rank_table = {
	["novice"] = 0.1,
	["trainee"] = 0.2,
	["experienced"] = 0.4,
	["professional"] = 0.5,
	["veteran"] = 0.7,
	["expert"] = 1,
	["master"] = 1.7,
	["legend"] = 3
}


--========================================< Utility >========================================--

local function send_news (faction_1 , faction_2 , text , icon) -- Send news upon relation major changes
	local faction_1_str = game.translate_string( faction_1 )
	local faction_2_str = game.translate_string( faction_2 )
	local relation_str = game.translate_string( text )
	local str = faction_1_str .. " " .. game.translate_string("st_relations_and") .. " " .. faction_2_str .. " " .. relation_str
	news_manager.send_tip( db.actor, str, nil, icon, nil, nil )
end

local function reset_goodwill (faction_1 , faction_2) -- Reset the goodwill for actors of both factions
	if ( character_community( db.actor ) == faction_1 or ("actor_" .. faction_1) ) then
		relation_registry.set_community_goodwill( faction_2, db.actor:id( ), 0 )
	elseif ( character_community( db.actor ) == faction_2 or ("actor_" .. faction_2) ) then
		relation_registry.set_community_goodwill( faction_1, db.actor:id( ), 0 )
	end
end

local function is_relation_allowed (faction_1 , faction_2) -- Check if the relation between both factions is changeable 
	-- Check blacklisted factions 
	for i = 1, #blacklist do
		if (blacklist[i] == faction_1) or (blacklist[i] == faction_2) then
			return false
		end
	end
	
	-- Check blacklisted pairs 
	for i = 1, #blacklist_pair do
		if (blacklist_pair[i][1] == faction_1) and (blacklist_pair[i][2] == faction_2) then
			return false
		elseif (blacklist_pair[i][2] == faction_1) and (blacklist_pair[i][1] == faction_2) then
			return false
		end
	end
	
	return true
end

local function give_range ( value , range , up ) -- shift value randomly based on range
	if (range >= 1) then
		return value
	end
	
	local a = value
	local po = 1
	while (a < 10) do
		a = a * 10
		po = po * 10
	end
	
	if up then -- only give higher values
		a = math.random ( a , math.floor(a + (a * range )) )
		if (value == 1) then -- return (1) values
			a = po
		end
	else
		a = math.random ( math.ceil(a - (a * range )) , math.floor(a + (a * range )) )
	end
	a = a / po
	
	return a
end

local function save_relation (faction_1 , faction_2 , relation) -- Save the relation between both factions
	set_factions_community_num( faction_1, faction_2, relation )
	alun_utils.save_var( db.actor, ("drx_df_" .. faction_1 .. "_" .. faction_2 .. "_relations"), relation )
	set_factions_community_num( faction_2, faction_1, relation )
	alun_utils.save_var( db.actor, ("drx_df_" .. faction_2 .. "_" .. faction_1 .. "_relations"), relation )
end

local function load_relation (faction_1 , faction_2 ) -- Load the relation between both factions
	local relation
	relation = alun_utils.load_var( db.actor, ("drx_df_" .. faction_1 .. "_" .. faction_2 .. "_relations"), nil )
	if ( relation ~= nil ) then
		set_factions_community_num( faction_1, faction_2, relation )
	end
	relation = alun_utils.load_var( db.actor, ("drx_df_" .. faction_2 .. "_" .. faction_1 .. "_relations"), nil )
	if ( relation ~= nil ) then
		set_factions_community_num( faction_2, faction_1, relation )
	end
end

local function change_faction_relations ( faction_1, faction_2, delta ) -- Change the relation between both factions by (delta)

	-- Get old faction relations:
	local old_1_2_relations = get_factions_community( faction_1, faction_2 )
	local old_2_1_relations = get_factions_community( faction_2, faction_1 )
	if ( (math.abs( old_2_1_relations )) > (math.abs( old_1_2_relations )) ) then
		old_1_2_relations = old_2_1_relations
	end
	local old_a1_2_relations = get_factions_community( ("actor_" .. faction_1), faction_2 )
	local old_2_a1_relations = get_factions_community( faction_2, ("actor_" .. faction_1) )
	if ( (math.abs( old_2_a1_relations )) > (math.abs( old_a1_2_relations )) ) then
		old_a1_2_relations = old_2_a1_relations
	end
	local old_a2_1_relations = get_factions_community( ("actor_" .. faction_2), faction_1 )
	local old_1_a2_relations = get_factions_community( faction_1, ("actor_" .. faction_2) )
	if ( (math.abs( old_1_a2_relations )) > (math.abs( old_a2_1_relations )) ) then
		old_a2_1_relations = old_1_a2_relations
	end

	-- Calculate new faction relation value, randomly reset if pegged:
	local relation = (old_1_2_relations + delta)
	if ( relation > friend_limit ) then
		if ( math.random( 100 ) < 50 ) then
			relation = 0
		else
			relation = friend_limit
		end
	elseif ( relation < enemy_limit ) then
		if ( math.random( 100 ) < 50 ) then
			relation = 0
		else
			relation = enemy_limit
		end
	end

	-- Save new relation changes
	save_relation ( faction_1 , faction_2 , relation ) -- Save overall faction relations:
	save_relation ( "actor_" .. faction_1 , faction_2 , relation ) -- Save actor faction / faction 2 relations:
	save_relation ( faction_1 , "actor_" .. faction_2 , relation ) -- Save actor faction / faction 1 relations:
	
	--------------------( Send news / Reset goodwill if necessary )--------------------
	
	-- Check if faction war footing has changed to hostile:
	if ( (old_1_2_relations > ENEMIES) and (get_factions_community( faction_1, faction_2 ) <= ENEMIES) ) then
		send_news (faction_1 , faction_2 , "st_relations_declared_war" , "patriarch")
		reset_goodwill (faction_1 , faction_2) -- only when they go hostile
	end

	-- Check if faction war footing has changed to allied:
	if ( (old_1_2_relations < FRIENDS) and (get_factions_community( faction_1, faction_2 ) >= FRIENDS) ) then
		send_news (faction_1 , faction_2 , "st_relations_alliance" , "completionist")
	end

	-- Check if faction war footing has changed from allied to neutral:
	if ( (old_1_2_relations >= FRIENDS) and (get_factions_community( faction_1, faction_2 ) < FRIENDS) and (get_factions_community( faction_1, faction_2 ) > ENEMIES) ) then
		send_news (faction_1 , faction_2 , "st_relations_deteriorating" , "silver_or_lead")
	end

	-- Check if faction war footing has changed from hostile to neutral:
	if ( (old_1_2_relations <= ENEMIES) and (get_factions_community( faction_1, faction_2 ) < FRIENDS) and (get_factions_community( faction_1, faction_2 ) > ENEMIES) ) then
		send_news (faction_1 , faction_2 , "st_relations_cease_fire" , nil)
	end

end

local function reset_all_relations()
	local tbl = {}
	for i=1, #factions_table_all do
		local value = ini_g:r_string_ex("communities_relations" , factions_table_all[i])
		tbl[factions_table_all[i]] = alun_utils.str_explode(value,",")
	end
	
	for i=1,#factions_table_all do
		for j=1,#factions_table_all do
			set_factions_community_num( factions_table_all[i] , factions_table_all[j] , tonumber(tbl[factions_table_all[i]][j]) )
			--printf("TRX - " .. factions_table_all[i] .. " + " .. factions_table_all[j] .. " = " .. tonumber(tbl[factions_table_all[i]][j]))
		end
	end
end

--========================================< Callbacks >========================================--

local function npc_on_death_callback ( victim, killer ) -- NPC killed callback - raises or lowers faction relations when an NPC is killed

	-- Return if Dynamic Relations option is off
	if ( not dynamically_change ) then
		return
	end
	if ( not IsStalker( victim ) ) or ( not IsStalker( killer ) ) then
		return
	end
	
	local sim = alife()
	
	--======< victim >======--
	-- Get faction:
	local victim_id = victim:id()
	local victim_db = db.storage[victim_id] and db.storage[victim_id].object
	local victim_se_obj = sim:object( victim_id )
	if ( not victim_se_obj ) then
		return
	end
	local victim_faction = alife_character_community( victim_se_obj )
	victim_faction = string.gsub( victim_faction, "actor_", "" )
	local victim_rep = string.gsub( alun_utils.get_reputation_name(victim_db:character_reputation()) , "st_reputation_" , "" )
	local victim_rank = ranks.get_obj_rank_name(victim_db)
	-- Prepare reputation
	local victim_rep_bad_value = rep_enemy_table[victim_rep] or 1
	local victim_rep_good_value = rep_friend_table[victim_rep] or 1
	-- Prepare rank
	local victim_rank_value = rank_table[victim_rank] or 0.5
	
	-- factions relations to victim faction
	local enemy_num = 0
	local natural_num = 0
	local friend_num = 0
	for i=1,#factions_table do
		if (victim_faction ~= factions_table[i]) then
			local rel = get_factions_community( victim_faction , factions_table[i] )
			if (rel <= -1000) then
				enemy_num = enemy_num + 1
			elseif (rel > -1000) and (rel < 1000) then
				natural_num = natural_num + 1
			elseif (rel > -1000) and (rel < 1000) then
				friend_num = friend_num + 1
			end
		end
	end
	
	--======< killer >======--
	-- Get faction:
	local killer_id = killer:id()
	local killer_db = db.storage[killer_id] and db.storage[killer_id].object
	local killer_se_obj = sim:object( killer_id )
	if ( not killer_se_obj ) then
		return
	end
	local killer_faction = alife_character_community( killer_se_obj )
	killer_faction = string.gsub( killer_faction, "actor_", "" )
	local killer_rep = string.gsub( alun_utils.get_reputation_name(killer_db:character_reputation()) , "st_reputation_" , "" )
	local killer_rank = ranks.get_obj_rank_name(killer_db)
	-- Prepare reputation
	local killer_rep_bad_value = rep_enemy_table[killer_rep] or 1
	local killer_rep_good_value = rep_friend_table[killer_rep] or 1
	-- Prepare rank
	local killer_rank_value = rank_table[killer_rank] or 0.5
	
	
	-- return if killer and victim are from the same faction
	if (killer_faction == victim_faction) then
		return
	end

	-- If killed NPC was enemy of faction, raise relation toward killer faction:
	if ( math.random( 100 ) > 50 ) then
		for i = 1, #factions_table do
			if ( factions_table[i] ~= killer_faction ) then
				if ( game_relations.is_factions_enemies( factions_table[i], victim_faction ) ) then
					if ( math.random( 100 ) > 50 ) then -- random faction picker
						
						-- Relation calculation:
						-- 1. Big impact: Rank of victim
						-- 2. Avergae impact: Reputation of victim (if it was bad enough)
						-- 2. Small impact: Rank of killer
						-- 3. Slight impact: reputation of killer (if it was good enough)
						
						local v_rep_bad = give_range( victim_rep_bad_value , 0.1 , true )
						local v_rep_good = give_range( victim_rep_good_value , 0.1 , true )
						local v_rank = give_range(victim_rank_value , 0.25)
						
						local k_rep_bad = (v_rep_good > 1) and give_range( killer_rep_bad_value , 0.1 , true ) or 0 -- disable if victim reputation is not remarkable
						local k_rep_good = (v_rep_bad > 1) and give_range( killer_rep_good_value , 0.1 , true ) or 0 -- disable if victim reputation is not remarkable
						local k_rank = give_range( killer_rank_value , 0.25 )
						
						local value = math.floor( death_value * ( v_rank + ( k_rank / 5 ) ) * ( v_rep_bad + ( k_rep_good / 10 ) ) )
						
						if is_relation_allowed( factions_table[i] , killer_faction ) and ( natural_num + friend_num > friend_count_limit ) then
							change_faction_relations( factions_table[i], killer_faction, value )
							--printf(">>> TRX: Relations positive change | " .. factions_table[i] .. " <-> " .. killer_faction .. " relation change = " .. value)
						else
							--printf(">>> TRX: Relations change | " .. factions_table[i] .. " <-> " .. killer_faction .. " relation can't be changed!")
						end
						--printf(">>> TRX: Victim | Name: " .. victim_db:character_name() .. " | Faction: " .. victim_faction .. " | Rank: " .. victim_rank .. " | Reputation: " .. victim_rep)
						--printf(">>> TRX: Killer | Name: " .. killer_db:character_name() .. " | Faction: " .. killer_faction .. " | Rank: " .. killer_rank .. " | Reputation: " .. killer_rep)
						--printf(">>> TRX: Numbers | k_rank:"..k_rank.." | v_rank:"..v_rank.." | v_rep_bad:"..v_rep_bad.." | k_rep_good:"..k_rep_good)
						--printf(">>> TRX: Calculations | " .. value .. " = math.floor( "..death_value.." * ( "..v_rank.." + ( "..k_rank.." / 5 ) ) * ( "..v_rep_bad.." + ( "..k_rep_good.." / 10) ) )")
						--printf("---------------------------------------------------------------------------------")
					end
				end
			end
		end

	-- If killed NPC was friend or neutral to faction, lower relation toward killer faction:
	else
		for i = 1, #factions_table do
			if ( factions_table[i] ~= killer_faction ) then
				if ( not game_relations.is_factions_enemies( factions_table[i], victim_faction ) ) then
					if ( math.random( 100 ) > 50 ) then -- random faction picker
					
						-- Relation calculation:
						-- 1. Big impact: Rank of victim
						-- 2. Avergae impact: Reputation of victim (if it was good enough)
						-- 2. Small impact: Rank of killer
						-- 3. Slight impact: reputation of killer (if it was bad enough)
						
						local v_rep_bad = give_range( victim_rep_bad_value , 0.1 , true )
						local v_rep_good = give_range( victim_rep_good_value , 0.1 , true )
						local v_rank = give_range(victim_rank_value , 0.25)
						
						local k_rep_bad = (v_rep_good > 1) and give_range( killer_rep_bad_value , 0.1 , true ) or 0 -- disable if victim reputation is not remarkable
						local k_rep_good = (v_rep_bad > 1) and give_range( killer_rep_good_value , 0.1 , true ) or 0 -- disable if victim reputation is not remarkable
						local k_rank = give_range( killer_rank_value , 0.25 )
						
						local value = math.floor( death_value * ( v_rank + ( k_rank / 5 ) ) * ( v_rep_good + ( k_rep_bad / 10 ) ) )

						if is_relation_allowed( factions_table[i] , killer_faction ) and ( enemy_num > enemy_count_limit ) then
							change_faction_relations( factions_table[i], killer_faction, -(value) )
							--printf(">>> TRX: Relations negative change | " .. factions_table[i] .. " <-> " .. killer_faction .. " relation change = " .. -(value))
						else
							--printf(">>> TRX: Relations change | " .. factions_table[i] .. " <-> " .. killer_faction .. " relation can't be changed!")
						end
						--printf(">>> TRX: Victim | Name: " .. victim_db:character_name() .. " | Faction: " .. victim_faction .. " | Rank: " .. victim_rank .. " | Reputation: " .. victim_rep)
						--printf(">>> TRX: Killer | Name: " .. killer_db:character_name() .. " | Faction: " .. killer_faction .. " | Rank: " .. killer_rank .. " | Reputation: " .. killer_rep)
						--printf(">>> TRX: Numbers | k_rank:"..k_rank.." | v_rank:"..v_rank.." | v_rep_good:"..v_rep_good.." | k_rep_bad:"..k_rep_bad)
						--printf(">>> TRX: Calculations | " .. -(value) .. " = math.floor( "..death_value.." * ( "..v_rank.." + ( "..k_rank.." / 5 ) ) * ( "..v_rep_bad.." + ( "..k_rep_good.." / 10) ) )")
						--printf("---------------------------------------------------------------------------------")
					end
				end
			end
		end

	end
end

local function on_game_load() -- Restore faction relations

	if (USE_MARSHAL) then
		if 	(alife_storage_manager.get_state().new_game_relations) then
			-- Restore relations for each faction:
			for i = 1, #factions_table do
				for j = (i + 1), #factions_table do
					local faction_1 = factions_table[i]
					local faction_2 = factions_table[j]
					
					load_relation ( faction_1 , faction_2 ) -- load and set overall faction relations:
					load_relation ( "actor_" .. faction_1 , faction_2 ) -- load and set actor faction 1 / faction 2 relations:
					load_relation ( faction_1 , "actor_" .. faction_2 ) -- load and set actor faction 2 / faction 1 relations:
				end
			end
		else
			reset_all_relations()
			alife_storage_manager.get_state().new_game_relations = true
		end
	end
end

function on_game_start() -- Register NPC killed callback and restore faction relations:
	RegisterScriptCallback( "npc_on_death_callback", npc_on_death_callback )
	RegisterScriptCallback( "on_game_load", on_game_load )
end


-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


function set_factions_community(faction, faction_to, new_community)
	if(faction~=nil) and (faction~="none") and (faction_to~="none") then
		local community = tonumber(new_community) or new_community=="enemy" and -5000 or new_community=="friend" and 5000 or 0
		set_factions_community_num(faction, faction_to, community)
	else
		--printf("No such faction community: "..tostring(faction))
	end
end

function set_factions_community_num(faction, faction_to, new_community_num)
	if(faction~=nil) and (faction~="none") and (faction_to~="none") then
		relation_registry.set_community_relation(faction, faction_to, new_community_num)
	else
		--printf("No such faction community: "..tostring(faction))
	end
end

function change_factions_community_num(faction_name, obj_id, delta)
	if(faction_name~=nil) and (faction_name~="none") and (obj_id ~= nil) then
		relation_registry.change_community_goodwill(faction_name, obj_id, delta)
	else
		--printf("No such faction community: "..tostring(faction))
	end
end

function get_factions_community(faction, faction_to)
	if(faction~=nil) and (faction~="none") and (faction_to~="none") then
		return relation_registry.community_relation(faction, faction_to)
	else
		--printf("No such faction community: "..tostring(faction))
		return nil
	end
end

function is_factions_friends(faction, faction_to)
	if(faction~=nil) and (faction~="none") and (faction_to~="none") then
		return relation_registry.community_relation(faction, faction_to)>=FRIENDS
	else
		--printf("No such faction community: "..tostring(faction))
		return false
	end
end

function is_factions_enemies(faction, faction_to)
	if(faction~=nil) and (faction~="none") and (faction_to~="none") then
		return relation_registry.community_relation(faction, faction_to)<=ENEMIES
	else
		--printf("No such faction community: "..tostring(faction))
		return false
	end
end

function get_npcs_relation(npc1, npc2)
	return npc1 and npc2 and npc1:relation(npc2)
end

function set_npcs_relation(npc1, npc2, new_relation)
	local goodwill = tonumber(new_relation) or new_relation == "enemy" and -1000 or new_relation == "friend" and 1000 or 0
	if npc1 and npc2 then
		npc1:force_set_goodwill(goodwill, npc2)
	else
		--printf("Npc not set in goodwill function!!!")
	end
end

function get_npc_sympathy(npc)
	return npc:sympathy()
end

function set_npc_sympathy(npc, new_sympathy)
	if(new_sympathy<0) then
		new_sympathy = 0
	elseif(new_sympathy>1) then
		new_sympathy = 1
	end
	if npc then
		npc:set_sympathy(new_sympathy)
	else
		--printf("Npc not set in sympathy function!!!")
	end
end

function set_squad_goodwill(squad_id, new_goodwill)
	--printf("Applying new game relation [%s] between squad [%s] and npc [%s] !", new_goodwill, squad_id, "actor")
	local squad = get_story_squad(squad_id)
	if squad == nil then
		if type(squad_id) == "string" then
			--printf("there is no story squad with id [%s]", squad_id)
			return
		else
			squad = alife_object(squad_id)
		end
	end
	if squad then
		squad:set_squad_relation(new_goodwill)
	else
		--printf("There is no squad [%s] in sim_board", squad_id)
	end
end

function set_squad_goodwill_to_npc(npc, squad_id, new_goodwill)
	if not (npc) then
		return
	end
	local goodwill = tonumber(new_relation) or new_relation == "enemy" and -1000 or new_relation == "friend" and 1000 or 0
	local squad = squad_id and (get_story_squad(squad_id) or alife_object(squad_id))
	if squad then
		local sim = alife()
		local se_npc = sim:object(npc:id())
		if not (se_npc) then
			return
		end
		for k in squad:squad_members() do
			local se_obj = k.object or k.id and sim:object(k.id)
			if (se_obj) then
				se_obj:force_set_goodwill(goodwill, npc:id())
				se_npc:force_set_goodwill(goodwill, k.id)
			end
		end
	else
		--printf("There is no squad [%s] in sim_board", squad_id)
	end
end

function set_squad_community_goodwill(squad_id, community, new_goodwill) -->> fixed
	local goodwill = tonumber(new_goodwill) or new_goodwill == "enemy" and -1000 or new_goodwill == "friend" and 1000 or 0
	local squad = squad_id and (get_story_squad(squad_id) or alife_object(squad_id))
	if squad then
		for k in squad:squad_members() do
			local obj = db.storage[k.id] and db.storage[k.id].object or level.object_by_id(k.id)
			if(obj) then
				obj:set_community_goodwill(community, goodwill)
			end
		end
	else
		--printf("There is no squad [%s] in sim_board", squad_id)
	end
end

function set_level_faction_community(obj)
	if(temp_goodwill_table.communities~=nil) then
		for k,v in pairs(temp_goodwill_table.communities) do
			if(character_community(obj)==k) then
				for kk,vv in pairs(v) do
					if(kk==obj:id()) and db.actor then
						relation_registry.set_community_goodwill(k, db.actor:id(), vv)
--	run_string xr_effects.set_level_faction_community(nil, nil, {"bandit", "peacemaker_selo", "friend"})
						obj:force_set_goodwill(vv, db.actor)
						v[kk] = nil
					end
				end
			end
		end
	end
end

function set_community_goodwill_for_faction(faction)
	local communities = alun_utils.get_communities_list()
	for i,community in pairs(communities) do
		relation_registry.set_community_goodwill(community, 0, relation_registry.community_relation(community,faction))
	end
end

function check_all_squad_members(squad_name, relation)
	local squad = get_story_squad(squad_name)
	if squad == nil then return false end
	if db.actor == nil then return false end
	local goodwill = tonumber(relation) or relation == "enemy" and -1000 or relation == "friend" and 1000 or 0
	local is_enemy
	for k in squad:squad_members() do
		is_enemy = nil
		local obj = db.storage[k.id] and db.storage[k.id].object or level.object_by_id(k.id)
		if (goodwill == -1000) then
			is_enemy = obj and obj:general_goodwill(db.actor)<=ENEMIES
		else
			is_enemy = obj and obj:general_goodwill(db.actor)>=FRIENDS
		end
		if is_enemy then
			return true
		end
	end
	return false
end

function get_squad_goodwill_to_actor_by_id(squad_id)
	local squad = alife_object(squad_id)
	if(squad==nil) then
		--printf("No such squad %s in board", tostring(squad_id))
		return false
	end
	if(squad.relationship~=nil) then
		--printf(" squad_relation %s", tostring(squad.relationship))
		return squad.relationship
	else
		if (is_squad_monster[squad.player_id]) then
			return "enemy"
		end
		local goodwill = "neutral"
		if(relation_registry.community_relation(squad:get_squad_community(), alife():actor():community())>=FRIENDS) then
			goodwill = "friend"
		elseif(relation_registry.community_relation(squad:get_squad_community(), alife():actor():community())<=ENEMIES) then
			goodwill = "enemy"
		end
		return goodwill
	end
end


function get_squad_goodwill_to_actor(squad_name)
	local squad = get_story_squad(squad_name)
	if(squad==nil) then
		--printf("No such squad %s in board", tostring(squad_name))
		return false
	end
	if(squad.relationship~=nil) then
		--printf(" squad_relation %s", tostring(squad.relationship))
		return squad.relationship
	else
		if (is_squad_monster[squad.player_id]) then
			return "enemy"
		end
		local goodwill = "neutral"
		if(relation_registry.community_relation(squad:get_squad_community(), alife():actor():community())>=FRIENDS) then
			goodwill = "friend"
		elseif(relation_registry.community_relation(squad:get_squad_community(), alife():actor():community())<=ENEMIES) then
			goodwill = "enemy"
		end
		return goodwill
	end
end

function is_squad_enemy_to_actor(squad_name)
	return get_squad_goodwill_to_actor(squad_name)=="enemy"
end

function is_squad_friend_to_actor(squad_name)
	return get_squad_goodwill_to_actor(squad_name)=="friend"
end

function is_squad_neutral_to_actor(squad_name)
	return get_squad_goodwill_to_actor(squad_name)=="neutral"
end

function set_gulag_relation_actor(smart_name, relation)
	local gulag = xr_gulag.get_gulag_by_name(smart_name)
	local goodwill = tonumber(relation) or relation == "enemy" and -1000 or relation == "friend" and 1000 or 0
	local object
	for k,v in pairs(gulag.npc_info) do
		object = db.storage[v.se_obj.id] and db.storage[v.se_obj.id].object or level.object_by_id(v.se_obj.id)
		if(object) then
			object:force_set_goodwill(goodwill, db.actor)
			object:set_community_goodwill(character_community(db.actor), goodwill)
		end
	end
end

function get_gulag_relation_actor(smart_name, relation)
	local gulag = xr_gulag.get_gulag_by_name(smart_name)
	if gulag then
		local goodwill = 0
		local npc_count = 0
		local object
		for k,v in pairs(gulag.npc_info) do
			object = db.storage[v.se_obj.id] and db.storage[v.se_obj.id].object or level.object_by_id(v.se_obj.id)
			if object and db.actor then
				goodwill = goodwill + object:general_goodwill(db.actor)
				npc_count = npc_count + 1
			end
		end
		if npc_count ~= 0 then
			local delta = goodwill/npc_count
			relation = tonumber(relation) or relation == "enemy" and -1000 or relation == "friend" and 1000 or 0
			if relation == -1000 and delta <= ENEMIES then
				return true
			elseif relation == 1000 and delta >= FRIENDS then
				return true
			elseif relation == 0 and delta < FRIENDS and delta > ENEMIES then
				return true
			end
		end
	end
	return false
end

function get_squad_relation_to_actor_by_id(squad_id)
	local squad = alife_object(squad_id)
	if(squad==nil) then
		--printf("No such squad %s in board", tostring(squad_id))
	end

	if (is_squad_monster[squad.player_id]) then
		return "enemy"
	end

    local goodwill = 0
    local npc_count = 0
	local object
	for k in squad:squad_members() do
		object = db.storage[k.id] and db.storage[k.id].object or level.object_by_id(k.id)
        if object and db.actor then
            goodwill = goodwill + object:general_goodwill(db.actor)
            npc_count = npc_count + 1
        end
    end
    if npc_count ~= 0 then
        local delta = goodwill/npc_count
        if delta <= ENEMIES then
            return "enemy"
        elseif delta >= FRIENDS then
            return "friends"
        elseif delta < FRIENDS and delta > ENEMIES then
            return "neutral"
        end
    end
	return "enemy"
end
