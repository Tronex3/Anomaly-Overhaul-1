--'******************************************************
--'*  Биндер объекта зоны аномалий .
--'******************************************************
artefact_ways_by_id					= {}
artefact_points_by_id				= {}
parent_zones_by_artefact_id			= {}

local artefacts_table_fill_table = {

-- Active artefacts
	af_class_gravi = {
		"af_black_spray",
		"af_night_star",
		"af_gravi",
		"af_gold_fish",
		"af_medusa",
		"af_vyvert",
		"af_empty",
		"af_full_empty",
		"af_death_lamp"
	},

	af_class_thermo = {
		"af_itcher",
		"af_pin",
		"af_cristall",
		"af_fireball",
		"af_dummy_glassbeads",
		"af_eye",
		"af_fire",
		"af_lobster_eyes"
	},

	af_class_chem = {
		"af_blood",
		"af_mincer_meat",
		"af_bracelet",
		"af_baloon",
		"af_soul",
		"af_fuzz_kolobok",
		"af_glass",
		"af_cristall_flower"
	},

	af_class_electro = {
		"af_electra_sparkler",
		"af_sponge",
		"af_ring",
		"af_electra_flash",
		"af_dummy_battery",
		"af_dummy_dummy",
		"af_ice",
		"af_electra_moonlight"
	},

-- Inactive artefacts
	af_class_gravi_musor = {
		"af_ear",
		"af_signet",
		"af_fountain",
		"af_lighthouse",
		"af_cell",
		"af_sun",
		"af_chelust"
	},

	af_class_thermo_musor = {
		"af_repei",
		"af_zhelch",
		"af_cocoon",
		"af_fire_loop",
		"af_spaika",
		"af_sandstone",
		"af_dragon_eye"
	},

	af_class_chem_musor = {
		"af_skull_miser",
		"af_peas",
		"af_black_angel",
		"af_medallion",
		"af_star_phantom",
		"af_grapes",
		"af_kislushka"
	},
	
	af_class_electro_musor = {
		"af_ball",
		"af_moh",
		"af_fonar",
		"af_tapeworm",
		"af_generator",
		"af_elektron",
		"af_serofim",
		"af_kogot"
	}
}
	
function bind(obj)
	obj:bind_object(anomaly_zone_binder(obj))
end

local anom_sect = "anomal_zone"

class "anomaly_zone_binder" (object_binder)
function anomaly_zone_binder:__init(obj) super(obj)
	local spawn_ini = obj:spawn_ini()
	local filename = spawn_ini and spawn_ini:r_string_ex(anom_sect,"cfg")
	if not filename then
		printf("WARNING: anomaly_zone_binder: 'anomal_zone' section missing from spawn ini")
		self.disabled = true
		return
	end
	
	self.ini = ini_file(filename)
	if not (self.ini) then
		printf("WARNING: anomaly_zone_binder: not setup properly! can't load cfg %s",filename)
		self.disabled = true
		return		
	end

	self.artefact_ways_by_id = {}
	self.artefact_points_by_id = {}
	self.disabled = false
	self.turned_off = false
	self.artefacts_table = {}
	self.path_table = {}
	self.fields_table = {}
	self.mines_table = {}
	self.forces_table = {}
	self.spawned_count = 0
	
	self.despawn_mean_time_table = {}

	self.respawn_artefacts = false
	self.forced_spawn = false -- for compatibility only
	self.forced_spawn_override = false -- for compatibility only
	self.forced_artefact = "" -- for compatibility only
	self.layers_count = self.ini:r_float_ex(anom_sect,"layers_count") or 1
	self.cur_layer = "layer_"..math.random(1,self.layers_count)
	self.custom_placement = self.layers_count>1

	local def_app_force_xz 		= self.ini:r_float_ex(anom_sect,"applying_force_xz") or 200
	local def_app_force_y 		= self.ini:r_float_ex(anom_sect,"applying_force_y") or 400
	local def_arts 				= self.ini:r_string_ex(anom_sect,"artefacts")
	local def_ways 				= self.ini:r_string_ex(anom_sect,"artefact_ways")
 	local def_field_name		= self.ini:r_string_ex(anom_sect,"field_name")
	
	local def_despawn_mean_time	= self.ini:r_float_ex(anom_sect,"despawn_mean_time") or 24


	local section, arts, parsed_condlist, path, field, mines_section
	for i = 1, self.layers_count do
		section = "layer_"..i

		self.despawn_mean_time_table[section] = self.ini:r_float_ex(section,"despawn_mean_time") or def_despawn_mean_time

		self.forces_table[section] = {}
		self.forces_table[section].xz = self.ini:r_float_ex(section,"applying_force_xz") or def_app_force_xz
		self.forces_table[section].y = self.ini:r_float_ex(section,"applying_force_y") or def_app_force_y
		arts = self.ini:r_string_ex(section,"artefacts") or def_arts
		
		if arts == nil then
			printf("There is no field 'artefacts' in section [%s] in obj [%s]", section, obj:name())
		end
		
		self.artefacts_table[section] = parse_names(arts)

		path = self.ini:r_string_ex(section,"artefact_ways") or def_ways
		if path == nil then
			printf("There is no field 'artefact_ways' in section [%s] in obj [%s]", section, obj:name())
		end
		self.path_table[section] = parse_names(path)

		if(self.custom_placement) then
			field = self.ini:r_string_ex(section,"field_name") or def_field_name
			if field == nil then
				--printf("There is no field 'field_name' in section [%s] in obj [%s]", section, obj:name())
				self.fields_table[section] = {}
			else
				self.fields_table[section] = parse_names(field)--field
			end

			mines_section = self.ini:r_string_ex(section,"mines_section")
			if mines_section == nil then
				printf("There is no field 'mines_section' in section [%s] in obj [%s]", section, obj:name())
			end

			if self.ini:line_count(mines_section) == 0 then
				--printf("There is no 'mines_names' in section [%s] in obj [%s]", mines_section, obj:name())
			end

			local t = empty_table(self.mines_table[section])
			if self.ini:line_count(mines_section) > 0 then
				for i = 0, self.ini:line_count(mines_section)-1 do
					temp1, mine_name, temp2 = self.ini:r_line(mines_section, i, "", "")
					t[#t+1] = mine_name
				end
			end
			self.mines_table[section] = t
		end
	end
	self.applying_force_xz = self.forces_table[self.cur_layer].xz
	self.applying_force_y = self.forces_table[self.cur_layer].y
end

function anomaly_zone_binder:disable_anomaly_fields()
	if not(self.custom_placement) then
		self.disabled = true
		return
	end
	local layer = self.cur_layer
	local anom_fields = bind_anomaly_field.fields_by_names
	local counter = 0
	for k,v in pairs(self.fields_table) do
		if(k~=layer) then
			for kk, vv in pairs(self.fields_table[k]) do
				if(anom_fields[vv]~=nil) then
					anom_fields[vv]:set_enable(false)
				else
					counter = counter + 1
				end
			end
		end
	end
	for k,v in pairs(self.mines_table) do
		if(k~=layer) then
			for kk,vv in pairs(self.mines_table[k]) do
				if(anom_fields[vv]~=nil) then
					anom_fields[vv]:set_enable(false)
				else
					counter = counter + 1
				end
			end
		end
	end
	if(counter==0) then
		self.disabled = true
	end

	if not self.turned_off then
		for kk, vv in pairs(self.fields_table[layer]) do
			if(anom_fields[vv]~=nil) then
				anom_fields[vv]:set_enable(true)
			end
		end
		for kk,vv in pairs(self.mines_table[layer]) do
			if(anom_fields[vv]~=nil) then
				anom_fields[vv]:set_enable(true)
			end
		end
	end
end

function anomaly_zone_binder:respawn_artefacts_and_replace_anomaly_zone()
	local anom_fields = bind_anomaly_field.fields_by_names
	
	self:despawn_artefacts()
	
	self.respawn_artefacts = true
	if(self.custom_placement) then
		local layer = self.cur_layer
		for k,v in pairs(self.fields_table[layer]) do
			if(anom_fields[v]~=nil) then
				anom_fields[v]:set_enable(false)
			end
		end
		for k,v in pairs(self.mines_table[layer]) do
			if(anom_fields[v]~=nil) then
				anom_fields[v]:set_enable(false)
			end
		end
		layer = "layer_"..math.random(1,self.layers_count)
		for k,v in pairs(self.fields_table[layer]) do
			if(anom_fields[v]~=nil) then
				anom_fields[v]:set_enable(true)
			end
		end
		for k,v in pairs(self.mines_table[layer]) do
			if(anom_fields[v]~=nil) then
				anom_fields[v]:set_enable(true)
			end
		end
		self.cur_layer = layer
		self.applying_force_xz = self.forces_table[self.cur_layer].xz
		self.applying_force_y = self.forces_table[self.cur_layer].y
	end
	self:update()
end

function anomaly_zone_binder:despawn_artefacts_update(hours)
	self.despawn_mean_time = self.despawn_mean_time_table[self.cur_layer]
	local despawn_chance = 1/self.despawn_mean_time
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = game.get_game_time():get(Y, M, D, h, m, s, ms)
	for i=0,hours-1 do
		local vh = (h >= 22 and (h - 24) or h) + 2 - i
		if math.random() < despawn_chance * (vh <= 8 and 0.2 or 1) then
			self:despawn_artefacts()
		end
	end
end

function anomaly_zone_binder:despawn_artefacts()
	for k,v in pairs(parent_zones_by_artefact_id) do
		if (v and v.object:id() == self.object:id()) then
			parent_zones_by_artefact_id[k] = nil
		end
	end
	for k,v in pairs(self.artefact_ways_by_id) do
		local se_obj = alife_object(tonumber(k))
		if se_obj then
			alife():release(se_obj)
		end
		artefact_ways_by_id[k] = nil
		artefact_points_by_id[k] = nil
		parent_zones_by_artefact_id[k] = nil
	end
	self.spawned_count = 0
	self.artefact_ways_by_id = {}
	self.artefact_points_by_id = {}
end

function anomaly_zone_binder:spawn_artefact_randomly()
	local level_classes_table = {
		k00_marsh = 1, k01_darkscape = 1, l01_escape = 1,
		l02_garbage = 2, l03_agroprom = 2, l04_darkvalley = 2, l04u_labx18 = 2,
		k02_trucks_cemetery = 3, l05_bar = 3, l06_rostok = 3, l08u_brainlab = 3, l08_yantar = 3,
		l07_military = 4, l09_deadcity = 4,
		l10_radar = 5, l10_red_forest = 5, l10_limansk = 5, l10u_bunker = 5, y04_pole = 5,
		jupiter = 6, pripyat = 6, l11_pripyat = 6,
		zaton = 7,
		l12_stancia = 8, l12u_sarcofag = 8,
		l12_stancia_2 = 9,
		l13_generators = 10
	}
	local level_class = level_classes_table[level.name()]
	if has_alife_info("achieved_geologist") and level_class < 10 then
		level_class = level_class + 1
	end
	
	local layer = self.cur_layer
	local c = level_class - 1
	local a, b = (c - 3 > 1) and (c - 3) or 1, (c + 3 < 6) and (c + 3) or 6
	for i = 1, #self.artefacts_table[layer] do
		local rnd_artefact_type = self.artefacts_table[layer][i]
		local rnd_artefact_tbl = artefacts_table_fill_table[rnd_artefact_type]
		local rnd_artefact_skip = false
		if rnd_artefact_tbl then
			rnd_artefact_type = nil
		else
			if math.random(1,100) > (2 * level_class + 1) then
				rnd_artefact_skip = true
			end
		end

		if not rnd_artefact_skip then

		local rnd_artefact = rnd_artefact_type or rnd_artefact_tbl[utils.mean_random(a,b,c,3,2,true)]

		local rnd_path_name			= self:get_artefact_path()
		local rnd_path				= patrol(rnd_path_name)
		local rnd_path_point		= math.random(0, rnd_path:count() - 1)
		local artefact_obj			= alife():create( rnd_artefact,
											rnd_path:point(rnd_path_point),
											self.object:level_vertex_id(),
											self.object:game_vertex_id())

		artefact_ways_by_id[artefact_obj.id] = rnd_path_name
		artefact_points_by_id[artefact_obj.id] = rnd_path_point
		self.artefact_ways_by_id[artefact_obj.id] = rnd_path_name
		self.artefact_points_by_id[artefact_obj.id] = rnd_path_point
		parent_zones_by_artefact_id[artefact_obj.id] = self
		self.spawned_count = self.spawned_count + 1

		end -- not rnd_artefact_skip
	end
end

function anomaly_zone_binder:get_artefact_path()
	local temp_table = {}
	local size_t = 0
	for k,v in pairs(self.path_table[self.cur_layer]) do
		local f_spawned = false
		for kk,vv in pairs(self.artefact_ways_by_id) do
			if vv ~= nil and v == vv then
				f_spawned = true
			end
		end
		if not f_spawned then
			size_t = size_t + 1
			temp_table[size_t] = v
		end
	end

	if size_t < 1 then
		--printf("No free way to spawn artefact in anomal zone [%s]", tostring(self.object:name()))
		return self.path_table[self.cur_layer][math.random(1, #self.path_table[self.cur_layer])]
	end

	local rnd_path_name	= temp_table[math.random(1, size_t)]

	return rnd_path_name
end

function anomaly_zone_binder:reload(section)
	object_binder.reload(self, section)
end

function anomaly_zone_binder:reinit()
	object_binder.reinit(self)
	db.storage[self.object:id()] = db.storage[self.object:id()] and empty_table(db.storage[self.object:id()]) or {}
	self.st = db.storage[self.object:id()]
end

function anomaly_zone_binder:net_spawn(server_object)
	if not object_binder.net_spawn(self, server_object) then
		return false
	end
	db.add_anomaly(self)
	db.add_obj(self.object)
	return true
end

function anomaly_zone_binder:net_destroy()
	db.del_anomaly(self)
	db.del_obj(self.object)
	object_binder.net_destroy(self)
end

function anomaly_zone_binder:update(delta)
	object_binder.update(self, delta)
 	if (not self.turned_off) and self.respawn_artefacts then
		self:spawn_artefact_randomly()
		self.respawn_artefacts = false
	end

	if not(self.disabled) then
		self:disable_anomaly_fields()
	end
end

function anomaly_zone_binder:cleanup()
    self:turn_off()
    self:turn_on()
    
    for k,v in pairs(parent_zones_by_artefact_id) do
        if (v and v.object:id() == self.object:id()) then
            parent_zones_by_artefact_id[k] = nil
        end
    end
end

function anomaly_zone_binder:turn_off()
	self.turned_off = true
	self:disable_anomaly_fields()
	for k,v in pairs(self.artefact_ways_by_id) do
		local se_obj = alife_object(tonumber(k))
		if se_obj then
			alife():release(se_obj)
		end
		artefact_ways_by_id[k] = nil
		artefact_points_by_id[k] = nil
		parent_zones_by_artefact_id[k] = nil
	end
	self.spawned_count = 0
	self.artefact_ways_by_id = {}
	self.artefact_points_by_id = {}
end

function anomaly_zone_binder:turn_on(f_af)
	self.turned_off = false
	self:disable_anomaly_fields()
	if f_af then
		self.respawn_artefacts = true
	else
		self.respawn_artefacts = false
	end
end

function anomaly_zone_binder:on_artefact_take(obj)
	local id
	if(type(obj.id)=="number") then
		id = obj.id
	else
		id = obj:id()
	end

    parent_zones_by_artefact_id[id] = nil
	artefact_ways_by_id[id] = nil
	artefact_points_by_id[id] = nil
	self.artefact_ways_by_id[id] = nil
	self.artefact_points_by_id[id] = nil
	self.spawned_count = self.spawned_count - 1
	if (self.spawned_count < 0) then
		self.spawned_count = 0
	end
end

-- Standart function for save
function anomaly_zone_binder:net_save_relevant()
	return true
end
-- Saving anomaly zone
function anomaly_zone_binder:save(thread)
	set_save_marker(thread, "save", false, "anomaly_zone_binder")
	object_binder.save(self, thread)

	local count = 0
	for k,v in pairs(self.artefact_ways_by_id) do
		count = count + 1
	end
	thread:w_u16(count)
	for k,v in pairs(self.artefact_ways_by_id) do
		thread:w_u16(k)
		thread:w_stringZ(v)
	end
----------------optimize this---------------------------------------------------
	local count = 0
	for k,v in pairs(self.artefact_points_by_id) do
		count = count + 1
	end
	thread:w_u16(count)
	for k,v in pairs(self.artefact_points_by_id) do
		thread:w_u16(k)
		thread:w_u8(v)
	end
--------------------------------------------------------------------------------
	thread:w_u8(self.spawned_count)
	thread:w_bool(self.respawn_artefacts)
	thread:w_bool(self.forced_spawn) -- for compatibility only
	thread:w_bool(self.forced_spawn_override) -- for compatibility only
	thread:w_stringZ(self.forced_artefact) -- for compatibility only
	local layer_num = tonumber(string.sub(self.cur_layer, string.find(self.cur_layer, "_")+1, string.len(self.cur_layer)))
	if(layer_num) then
		thread:w_u8(layer_num)
	else
		thread:w_u8(255)
	end
	thread:w_bool(self.turned_off)
	set_save_marker(thread, "save", true, "anomaly_zone_binder")
end
-- Loading anomaly zone
function anomaly_zone_binder:load(thread)
	set_save_marker(thread, "load", false, "anomaly_zone_binder")
	object_binder.load(self, thread)

	local count = thread:r_u16()
	for i=1,count do
		local art_id = thread:r_u16()
		local way_name = thread:r_stringZ()
		artefact_ways_by_id[art_id] = way_name
		self.artefact_ways_by_id[art_id] = way_name
		parent_zones_by_artefact_id[art_id] = self
	end
----------------optimize this---------------------------------------------------
	local count = thread:r_u16()
	for i=1,count do
		local art_id = thread:r_u16()
		local point_name = thread:r_u8()
		artefact_points_by_id[art_id] = point_name
		self.artefact_points_by_id[art_id] = point_name
	end
--------------------------------------------------------------------------------
	self.spawned_count = thread:r_u8()
	self.respawn_artefacts = thread:r_bool()
	self.forced_spawn = thread:r_bool() -- for compatibility only
	self.forced_spawn_override = thread:r_bool() -- for compatibility only
	self.forced_artefact = thread:r_stringZ() -- for compatibility only
	local layer_num = thread:r_u8()
	if(layer_num~=255) then
		self.cur_layer = "layer_"..layer_num
	end
	self.turned_off = thread:r_bool()
	set_save_marker(thread, "load", true, "anomaly_zone_binder")
    
    if (self.spawned_count < 0 or self.spawned_count > 200) then
        self:cleanup()
    end
end
